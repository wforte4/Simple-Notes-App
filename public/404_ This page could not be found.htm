<!DOCTYPE html>
<!-- saved from url=(0126)http://localhost:3000/changepassword/:eyJhbGciOiJIUzI1NiJ9.d2ZvcnRlNkBnbWFpbC5jb20.fd6ZMiXGjdw1hp8Bo6oSB_qlCOD6YENs3Fcu3yk6QCw -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width"><link rel="preconnect" href="https://fonts.gstatic.com/" class="jsx-1559901200"><link href="./404_ This page could not be found_files/css2" rel="stylesheet" class="jsx-1559901200"><title>404: This page could not be found</title><meta name="next-head-count" content="5"><noscript data-n-css=""></noscript><link rel="preload" href="./404_ This page could not be found_files/main.js" as="script"><link rel="preload" href="./404_ This page could not be found_files/webpack.js" as="script"><link rel="preload" href="./404_ This page could not be found_files/_app.js" as="script"><link rel="preload" href="./404_ This page could not be found_files/_error.js" as="script"><noscript id="__next_css__DO_NOT_USE__"></noscript><style id="__jsx-227064814">.toggle.jsx-227064814{position:absolute;top:18px;right:30px;-webkit-transition:all .3s ease;transition:all .3s ease;width:40px;height:20px;padding:2px;background:#ffd6fa;box-shadow:0 0 2px rgba(20,20,20,.8);border-radius:12px;cursor:pointer;}.circle.jsx-227064814{background:white;box-shadow:0 0 2px rgba(20,20,20,.8);-webkit-transition:all .3s ease;transition:all .3s ease;float:left;width:17px;height:17px;margin:2px;border-radius:50%;margin-left:2px;}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */</style><style id="__jsx-102701023">.dropdown.jsx-102701023{position:absolute;-webkit-transition:all .3s ease;transition:all .3s ease;background:#ffffff;box-shadow:0 0 2px rgba(20,20,20,.5);border-radius:4px;opacity:0;width:200px;height:auto;top:100px;right:0;-webkit-transform:translateX(150%);-ms-transform:translateX(150%);transform:translateX(150%);}.dropdown.jsx-102701023 h2.jsx-102701023{float:left;width:100%;text-align:center;font:16px 'Roboto';color:#1e1e1e;cursor:pointer;margin:0;padding:10px 0;}.dropdown.jsx-102701023 h2.jsx-102701023:hover{background:rgba(200,200,200,.4);}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */</style><style id="__jsx-4070205479">#nav.jsx-4070205479{position:fixed;top:0;left:0;width:100%;height:100px;-webkit-transition:all .3s ease;transition:all .3s ease;background:rgba(255,255,255,.9);-webkit-backdrop-filter:blur(12px);backdrop-filter:blur(12px);z-index:99;box-shadow:0 0 2px rgba(20,20,20,.5);}.toggletheme.jsx-4070205479{float:left;width:100%;position:relative;box-shadow:0 0 2px rgba(20,20,20,.5);padding:10px 0;}.toggletheme.jsx-4070205479 h2.jsx-4070205479{float:left;font:16px 'Roboto';margin:10px 30px;color:#1e1e1e;}.profile.jsx-4070205479{position:absolute;top:0;right:10px;width:230px;height:100px;cursor:pointer;opacity:1;}.profile.jsx-4070205479 img.jsx-4070205479{position:absolute;top:50%;right:20px;width:30px;height:30px;-webkit-transform:translate(0,-50%);-ms-transform:translate(0,-50%);transform:translate(0,-50%);}.profile.jsx-4070205479 h1.jsx-4070205479{float:left;font:15px 'Roboto';color:#1e1e1e;margin:0;margin-top:50px;-webkit-transform:translate(-60%,-50%);-ms-transform:translate(-60%,-50%);transform:translate(-60%,-50%);margin-left:50%;}.navLinks.jsx-4070205479{float:left;margin:22px 20px;padding:10px 0;}.navLinks.jsx-4070205479 li.jsx-4070205479{float:left;padding:10px;list-style:none;color:#1e1e1e;font:16px 'Roboto';cursor:pointer;}.logo.jsx-4070205479{float:left;width:70px;height:70px;padding:15px;}.title.jsx-4070205479{float:left;font:38px 'Montserrat';color:#1e1e1e;margin:15px 2.5px;padding:10px 2.5px;cursor:pointer;-webkit-transition:all .3s ease;transition:all .3s ease;}.up.jsx-4070205479:hover{-webkit-transform:translateY(-2px);-ms-transform:translateY(-2px);transform:translateY(-2px);text-shadow:0 1px #000;}.flash.jsx-4070205479{background:-webkit-linear-gradient(left,#ef32e6,#b317d6,#eeadff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/layout.js */</style><style id="__jsx-953519991">.bottomBar.jsx-953519991{background:grey;min-height:100px;position:absolute;bottom:0;left:0;width:90%;padding:5px 5%;}.bottomBar.jsx-953519991 h2.jsx-953519991{color:white;float:left;font:18px 'Montserrat';margin:35px 30px;}.logo.jsx-953519991{float:left;width:70px;height:70px;padding:15px;}.title.jsx-953519991{float:left;font:38px 'Montserrat';color:#1e1e1e;margin:15px 2.5px;padding:10px 2.5px;cursor:pointer;-webkit-transition:all .3s ease;transition:all .3s ease;}.up.jsx-953519991:hover{-webkit-transform:translateY(-2px);-ms-transform:translateY(-2px);transform:translateY(-2px);text-shadow:0 1px #fff;}.flash.jsx-953519991{background:-webkit-linear-gradient(left,#ef32e6,#b317d6,#eeadff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;}#footer.jsx-953519991{float:left;position:relative;width:100%;-webkit-transition:background .3s ease;transition:background .3s ease;background:#ffffff;box-shadow:0 0 2px rgba(20,20,20,.5);min-height:600px;}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/layout.js */</style><style id="__jsx-1559901200">#__next{padding:0;margin:0;width:100%;height:100%;float:left;}#layout{height:100%;width:100%;}html{padding:0;margin:0;width:100%;height:100%;float:left;color:black;}body{padding:0;margin:0;width:100%;height:100%;-webkit-transition:background .3s ease;transition:background .3s ease;background:#ffffff;}button{border:none;padding:10px;font:16px 'Roboto';cursor:pointer;border-radius:4px;-webkit-transition:all .3s ease;transition:all .3s ease;}button:focus{outline:none;box-sizing:border-box;border:1px solid #f5d9fc;box-shadow:0 0 5px #9803ba,inset 0 0 5px #9803ba;}input{border:1px solid #b317d6;box-sizing:border-box;padding:10px 5px;border-radius:4px;font:15px 'Roboto';color:black;background:#ffffff;-webkit-transition:all .3s ease;transition:all .3s ease;}input:focus,textarea:focus{outline:none;box-sizing:border-box;border:1px solid #f5d9fc;box-shadow:0 0 5px #9803ba,inset 0 0 5px #9803ba;background:none;}textarea{border:1px solid #b317d6;box-sizing:border-box;padding:10px 5px;border-radius:4px;font:15px 'Roboto';min-height:250px;color:black;background:#ffffff;-webkit-transition:all .3s ease;transition:all .3s ease;}.break{float:left;width:100%;height:2px;margin:5px 0;background:linear-gradient(to right,#ef32e6,#b317d6,#eeadff);}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/layout.js */</style><script charset="utf-8" src="./404_ This page could not be found_files/0.js"></script></head><body cz-shortcut-listen="true"><div id="__next"><div id="layout" class="jsx-1559901200"><div id="nav" class="jsx-4070205479"><img src="./404_ This page could not be found_files/mainicon.png" class="jsx-4070205479 logo"><h1 class="jsx-4070205479 title up">Synapse</h1><h1 class="jsx-4070205479 title flash">Flash</h1><ul class="jsx-4070205479 navLinks"><li class="jsx-4070205479">Home</li></ul><div class="jsx-4070205479 profile"><h1 class="jsx-4070205479">William Forte</h1><img src="./404_ This page could not be found_files/userIcon.png" class="jsx-4070205479"></div><div class="jsx-102701023 dropdown"><div class="jsx-4070205479 toggletheme"><h2 class="jsx-4070205479">Light</h2><div class="jsx-227064814 toggle"><div class="jsx-227064814 circle"></div></div></div><h2 class="jsx-102701023">Admin</h2><h2 class="jsx-102701023">Dashboard</h2><h2 class="jsx-102701023">My Profile</h2><h2 class="jsx-102701023">Logout</h2></div></div><div style="color:#000;background:#fff;font-family:-apple-system, BlinkMacSystemFont, Roboto, &quot;Segoe UI&quot;, &quot;Fira Sans&quot;, Avenir, &quot;Helvetica Neue&quot;, &quot;Lucida Grande&quot;, sans-serif;height:100vh;text-align:center;display:flex;flex-direction:column;align-items:center;justify-content:center"><div><style>body { margin: 0 }</style><h1 style="display:inline-block;border-right:1px solid rgba(0, 0, 0,.3);margin:0;margin-right:20px;padding:10px 23px 10px 0;font-size:24px;font-weight:500;vertical-align:top">404</h1><div style="display:inline-block;text-align:left;line-height:49px;height:49px;vertical-align:middle"><h2 style="font-size:14px;font-weight:normal;line-height:inherit;margin:0;padding:0">This page could not be found<!-- -->.</h2></div></div></div><div id="footer" class="jsx-953519991"><img src="./404_ This page could not be found_files/mainicon.png" class="jsx-953519991 logo"><h1 class="jsx-953519991 title up">Synapse</h1><h1 class="jsx-953519991 title flash">Flash</h1><div class="jsx-953519991 bottomBar"><h2 class="jsx-953519991">Copyright SynapseFlash © 2020</h2></div></div></div></div><script src="./404_ This page could not be found_files/react-refresh.js"></script><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"statusCode":404}},"page":"/_error","query":{},"buildId":"development","isFallback":false,"gip":true}</script><script nomodule="" src="./404_ This page could not be found_files/polyfills.js"></script><script src="./404_ This page could not be found_files/main.js"></script><script src="./404_ This page could not be found_files/webpack.js"></script><script src="./404_ This page could not be found_files/_app.js"></script><script src="./404_ This page could not be found_files/_error.js"></script><div id="__next-build-watcher" style="position: fixed; bottom: 10px; right: 20px; width: 0px; height: 0px; z-index: 99999;"></div><script src="./404_ This page could not be found_files/_buildManifest.js"></script><script src="./404_ This page could not be found_files/_ssgManifest.js"></script></body></html>