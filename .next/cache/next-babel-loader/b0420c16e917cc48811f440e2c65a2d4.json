{"ast":null,"code":"import _regeneratorRuntime from \"/Users/williamforte/Canvas/SynapseFlash/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/williamforte/Canvas/SynapseFlash/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Base Url for the rest api -- Every other directory can be accessed baseURL + \"/%s\";\nvar base = 'http://localhost:3600';\nexport var baseConfig = {\n  baseURL: base,\n  backendImages: base + '/ftp/',\n  thoughtURL: base + '/thoughts/'\n};\nexport function newRequest(_x, _x2, _x3, _x4) {\n  return _newRequest.apply(this, arguments);\n}\n\nfunction _newRequest() {\n  _newRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, route, headers, body) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(base + route, {\n              method: method,\n              headers: headers,\n              body: JSON.stringify({\n                body: body\n              })\n            }).then(function (res) {\n              return res.ok ? res : Promise.reject(res);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _newRequest.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/services/restservice.js"],"names":["base","baseConfig","baseURL","backendImages","thoughtURL","newRequest","method","route","headers","body","fetch","JSON","stringify","then","res","ok","Promise","reject"],"mappings":";;AAEA;AACA,IAAMA,IAAI,GAAG,uBAAb;AACA,OAAO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,OAAO,EAAEF,IADe;AAExBG,EAAAA,aAAa,EAAEH,IAAI,GAAG,OAFE;AAGxBI,EAAAA,UAAU,EAAEJ,IAAI,GAAG;AAHK,CAAnB;AAMP,gBAAsBK,UAAtB;AAAA;AAAA;;;yEAAO,iBAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,OAA1C,EAAmDC,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCC,KAAK,CAACV,IAAI,GAAGO,KAAR,EAAe;AACxBD,cAAAA,MAAM,EAAEA,MADgB;AAExBE,cAAAA,OAAO,EAAEA,OAFe;AAGxBC,cAAAA,IAAI,EAAEE,IAAI,CAACC,SAAL,CAAe;AAACH,gBAAAA,IAAI,EAAJA;AAAD,eAAf;AAHkB,aAAf,CAAL,CAIHI,IAJG,CAIE,UAAAC,GAAG;AAAA,qBAAKA,GAAG,CAACC,EAAJ,GAASD,GAAT,GAAcE,OAAO,CAACC,MAAR,CAAeH,GAAf,CAAnB;AAAA,aAJL,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["\n\n// Base Url for the rest api -- Every other directory can be accessed baseURL + \"/%s\";\nconst base = 'http://localhost:3600'\nexport const baseConfig = {\n  baseURL: base,\n  backendImages: base + '/ftp/',\n  thoughtURL: base + '/thoughts/'\n};\n\nexport async function newRequest (method, route, headers, body) {\n  await fetch(base + route, {\n    method: method,\n    headers: headers,\n    body: JSON.stringify({body})\n  }).then(res => (res.ok ? res: Promise.reject(res)))\n}\n\n"]},"metadata":{},"sourceType":"module"}