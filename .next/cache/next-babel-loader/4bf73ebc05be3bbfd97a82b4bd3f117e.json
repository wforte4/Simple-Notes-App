{"ast":null,"code":"import { useState, useEffect } from \"react\";\nexport function useScroll() {\n  var _useState = useState(0),\n      lastScrollTop = _useState[0],\n      setLastScrollTop = _useState[1];\n\n  var _useState2 = useState(0),\n      bodyOffset = _useState2[0],\n      setBodyOffset = _useState2[1];\n\n  var _useState3 = useState(bodyOffset.top),\n      scrollY = _useState3[0],\n      setScrollY = _useState3[1];\n\n  var _useState4 = useState(bodyOffset.left),\n      scrollX = _useState4[0],\n      setScrollX = _useState4[1];\n\n  var _useState5 = useState(),\n      scrollDirection = _useState5[0],\n      setScrollDirection = _useState5[1];\n\n  var listener = function listener(e) {\n    setBodyOffset(document.body.getBoundingClientRect());\n    setScrollY(-bodyOffset.top);\n    setScrollX(bodyOffset.left);\n    setScrollDirection(lastScrollTop > -bodyOffset.top ? \"down\" : \"up\");\n    setLastScrollTop(-bodyOffset.top);\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", listener);\n    return function () {\n      window.removeEventListener(\"scroll\", listener);\n    };\n  });\n  return {\n    scrollY: scrollY,\n    scrollX: scrollX,\n    scrollDirection: scrollDirection\n  };\n}\nexport function useWindowSize() {\n  var isClient = true;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  var _useState6 = useState(getSize),\n      windowSize = _useState6[0],\n      setWindowSize = _useState6[1];\n\n  useEffect(function () {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return function () {\n      return window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState7 = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }),\n      storedValue = _useState7[0],\n      setStoredValue = _useState7[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":null,"metadata":{},"sourceType":"module"}