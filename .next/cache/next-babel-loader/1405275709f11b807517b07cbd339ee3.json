{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/williamforte/Canvas/SynapseFlash/components/elements.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport { Children } from \"react\";\nimport { useScroll } from '../components/hooks';\nimport Theme from \"../styles/theme\";\nimport React from 'react';\nimport Link from 'next/link';\nexport function ParallaxBanner({\n  children,\n  image,\n  height,\n  shadow = false,\n  background = 'white'\n}) {\n  const currentScroll = useScroll();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: _JSXStyle.dynamic([[\"951616453\", [height, background, shadow ? Theme.sh.mat : null, -currentScroll.scrollY / 4]]]) + \" \" + 'banner',\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      className: _JSXStyle.dynamic([[\"951616453\", [height, background, shadow ? Theme.sh.mat : null, -currentScroll.scrollY / 4]]]) + \" \" + 'main_bg'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(_JSXStyle, {\n      id: \"951616453\",\n      dynamic: [height, background, shadow ? Theme.sh.mat : null, -currentScroll.scrollY / 4],\n      children: `.banner.__jsx-style-dynamic-selector{float:left;width:100%;height:${height};background:${background};overflow:hidden;position:relative;box-shadow:${shadow ? Theme.sh.mat : null};}.main_bg.__jsx-style-dynamic-selector{position:absolute;top:50%;left:50%;width:100%;-webkit-transform:translate(-50%,-50%) translate3d(0,0,0);-ms-transform:translate(-50%,-50%) translate3d(0,0,0);transform:translate(-50%,-50%) translate3d(0,0,0);margin-top:${-currentScroll.scrollY / 4}px;-webkit-transition:all .1s ease;transition:all .1s ease;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */`\n    }, void 0, false, void 0, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\nexport class Row extends React.Component {\n  render() {\n    const colcount = React.Children.count(this.props.children);\n    const newchildren = React.Children.map(this.props.children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        width: 100 / colcount,\n        height: this.props.height\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: _JSXStyle.dynamic([[\"734983430\", [this.props.padding ? 100 - this.props.padding * 2 : 100, this.props.padding, this.props.margin, this.props.background, this.props.overflow, this.props.height]]]) + \" \" + 'row',\n      children: [newchildren, /*#__PURE__*/_jsxDEV(_JSXStyle, {\n        id: \"734983430\",\n        dynamic: [this.props.padding ? 100 - this.props.padding * 2 : 100, this.props.padding, this.props.margin, this.props.background, this.props.overflow, this.props.height],\n        children: `.row.__jsx-style-dynamic-selector{float:left;width:${this.props.padding ? 100 - this.props.padding * 2 : 100}%;padding:0 ${this.props.padding}%;margin:${this.props.margin} 0;background:${this.props.background};min-height:200px;overflow:${this.props.overflow};height:${this.props.height};}@media only screen and (max-width:650px){.row.__jsx-style-dynamic-selector{height:auto;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */`\n      }, void 0, false, void 0, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const Col = ({\n  padding,\n  children,\n  background,\n  margin,\n  width,\n  height,\n  mobileDisplay\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: _JSXStyle.dynamic([[\"2949940743\", [width, padding, margin, background, height, mobileDisplay == false ? 'none' : 'block']]]) + \" \" + 'col',\n    children: [children, /*#__PURE__*/_jsxDEV(_JSXStyle, {\n      id: \"2949940743\",\n      dynamic: [width, padding, margin, background, height, mobileDisplay == false ? 'none' : 'block'],\n      children: `.col.__jsx-style-dynamic-selector{float:left;position:relative;width:${width}%;padding:${padding};margin:${margin};background:${background};min-height:200px;height:${height};}@media only screen and (max-width:650px){.col.__jsx-style-dynamic-selector{width:100%;display:${mobileDisplay == false ? 'none' : 'block'};}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */`\n    }, void 0, false, void 0, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\nexport function getDate(datetime) {\n  const first = datetime.split('T');\n  const date = first[0];\n  const second = first[1].split('Z');\n  const time = second[0];\n  return {\n    date,\n    time\n  };\n}\nexport const Date = ({\n  datetime\n}) => {\n  const date = datetime.split('T');\n  const time = date.split('Z');\n  return date[0], time[0];\n};\nexport function When({\n  condition,\n  children\n}) {\n  if (condition) {\n    return children;\n  } else {\n    return null;\n  }\n}\nexport const DropDown = ({\n  width,\n  height,\n  top,\n  right,\n  isActive,\n  links,\n  children,\n  background\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: _JSXStyle.dynamic([[\"3278400396\", [background, Theme.sh.mat, isActive ? 1 : 0, width, height, top, isActive ? right : 0, isActive ? 0 : '150%', background === '#ffffff' ? Theme.colors.dark : 'white']]]) + \" \" + 'dropdown',\n    children: [children, links && links.map((link, i) => {\n      if (link.href) {\n        return /*#__PURE__*/_jsxDEV(Link, {\n          href: link.href,\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: _JSXStyle.dynamic([[\"3278400396\", [background, Theme.sh.mat, isActive ? 1 : 0, width, height, top, isActive ? right : 0, isActive ? 0 : '150%', background === '#ffffff' ? Theme.colors.dark : 'white']]]),\n            children: link.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 56\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          onClick: link.action,\n          className: _JSXStyle.dynamic([[\"3278400396\", [background, Theme.sh.mat, isActive ? 1 : 0, width, height, top, isActive ? right : 0, isActive ? 0 : '150%', background === '#ffffff' ? Theme.colors.dark : 'white']]]),\n          children: link.title\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this);\n      }\n    }), /*#__PURE__*/_jsxDEV(_JSXStyle, {\n      id: \"3278400396\",\n      dynamic: [background, Theme.sh.mat, isActive ? 1 : 0, width, height, top, isActive ? right : 0, isActive ? 0 : '150%', background === '#ffffff' ? Theme.colors.dark : 'white'],\n      children: `.dropdown.__jsx-style-dynamic-selector{position:absolute;-webkit-transition:all .3s ease;transition:all .3s ease;background:${background};box-shadow:${Theme.sh.mat};border-radius:4px;opacity:${isActive ? 1 : 0};width:${width};height:${height};top:${top};right:${isActive ? right : 0};-webkit-transform:translateX(${isActive ? 0 : '150%'});-ms-transform:translateX(${isActive ? 0 : '150%'});transform:translateX(${isActive ? 0 : '150%'});}.dropdown.__jsx-style-dynamic-selector h2.__jsx-style-dynamic-selector{float:left;width:100%;text-align:center;font:16px 'Roboto';color:${background === '#ffffff' ? Theme.colors.dark : 'white'};cursor:pointer;margin:0;padding:10px 0;}.dropdown.__jsx-style-dynamic-selector h2.__jsx-style-dynamic-selector:hover{background:rgba(200,200,200,.4);}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93aWxsaWFtZm9ydGUvQ2FudmFzL1N5bmFwc2VGbGFzaC9jb21wb25lbnRzL2VsZW1lbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlJd0IsQUFHdUMsQUFhUCxBQVVxQixXQVRyQixPQWJhLElBY04sVUFTdEIsUUFSdUIsbUJBQ2dCLGVBZkssb0JBZ0J6QixlQUNOLEtBaEIrQixJQWlCekIsZUFDbkIscUJBakJzQixrQkFDbUIscUNBQ0YsbUNBQ0Msb0NBQ0gsaUNBQ0UsbUNBQ2dCLHFLQUN2RCIsImZpbGUiOiIvVXNlcnMvd2lsbGlhbWZvcnRlL0NhbnZhcy9TeW5hcHNlRmxhc2gvY29tcG9uZW50cy9lbGVtZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTY3JvbGwgfSBmcm9tICcuLi9jb21wb25lbnRzL2hvb2tzJ1xuaW1wb3J0IFRoZW1lIGZyb20gXCIuLi9zdHlsZXMvdGhlbWVcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluaydcblxuZXhwb3J0IGZ1bmN0aW9uIFBhcmFsbGF4QmFubmVyKHtjaGlsZHJlbiwgaW1hZ2UsIGhlaWdodCwgc2hhZG93ID0gZmFsc2UsIGJhY2tncm91bmQgPSAnd2hpdGUnfSkge1xuICAgIGNvbnN0IGN1cnJlbnRTY3JvbGwgPSB1c2VTY3JvbGwoKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYmFubmVyJz5cbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPSdtYWluX2JnJyBzcmM9e2ltYWdlfS8+XG4gICAgICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICAgICAgLmJhbm5lciB7XG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke2hlaWdodH07XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7YmFja2dyb3VuZH07XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogJHtzaGFkb3cgPyBUaGVtZS5zaC5tYXQ6IG51bGx9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAubWFpbl9iZyB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsLTUwJSkgdHJhbnNsYXRlM2QoMCwwLDApO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAkey1jdXJyZW50U2Nyb2xsLnNjcm9sbFkgLyA0fXB4O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgLjFzIGVhc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBjbGFzcyBSb3cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIGNvbnN0IGNvbGNvdW50ID0gUmVhY3QuQ2hpbGRyZW4uY291bnQodGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICAgICAgY29uc3QgbmV3Y2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge3dpZHRoOiAoMTAwIC8gY29sY291bnQpLCBoZWlnaHQ6IHRoaXMucHJvcHMuaGVpZ2h0fSlcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxuICAgICAgICAgICAgICAgIHtuZXdjaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICAgICAgICAgIC5yb3cge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJHt0aGlzLnByb3BzLnBhZGRpbmcgPyAxMDAgLSAodGhpcy5wcm9wcy5wYWRkaW5nICogMik6IDEwMH0lO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCAke3RoaXMucHJvcHMucGFkZGluZ30lO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAke3RoaXMucHJvcHMubWFyZ2lufSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHt0aGlzLnByb3BzLmJhY2tncm91bmR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluLWhlaWdodDogMjAwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJHt0aGlzLnByb3BzLm92ZXJmbG93fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHt0aGlzLnByb3BzLmhlaWdodH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NTBweCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLnJvdyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgICAgICAgIFxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IENvbCA9ICh7cGFkZGluZywgY2hpbGRyZW4sIGJhY2tncm91bmQsIG1hcmdpbiwgd2lkdGgsIGhlaWdodCwgbW9iaWxlRGlzcGxheX0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sJz5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgICAgICAuY29sIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICR7d2lkdGh9JTtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJHtwYWRkaW5nfTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAke21hcmdpbn07XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7YmFja2dyb3VuZH07XG4gICAgICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDIwMHB4O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7aGVpZ2h0fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NTBweCkge1xuICAgICAgICAgICAgICAgICAgICAuY29sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJHttb2JpbGVEaXNwbGF5ID09IGZhbHNlID8gJ25vbmUnOiAnYmxvY2snfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9PC9zdHlsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0ZShkYXRldGltZSkge1xuICAgIGNvbnN0IGZpcnN0ID0gZGF0ZXRpbWUuc3BsaXQoJ1QnKVxuICAgIGNvbnN0IGRhdGUgPSBmaXJzdFswXVxuICAgIGNvbnN0IHNlY29uZCA9IGZpcnN0WzFdLnNwbGl0KCdaJylcbiAgICBjb25zdCB0aW1lID0gc2Vjb25kWzBdXG4gICAgcmV0dXJuIHsgZGF0ZSwgdGltZSB9O1xufVxuXG5leHBvcnQgY29uc3QgRGF0ZSA9ICh7ZGF0ZXRpbWV9KSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IGRhdGV0aW1lLnNwbGl0KCdUJylcbiAgICBjb25zdCB0aW1lID0gZGF0ZS5zcGxpdCgnWicpXG4gICAgcmV0dXJuIGRhdGVbMF0sIHRpbWVbMF1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFdoZW4oe2NvbmRpdGlvbiwgY2hpbGRyZW59KSB7XG4gICAgaWYoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgRHJvcERvd24gPSAoe3dpZHRoLCBoZWlnaHQsIHRvcCwgcmlnaHQsIGlzQWN0aXZlLCBsaW5rcywgY2hpbGRyZW4sIGJhY2tncm91bmR9KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Ryb3Bkb3duJz5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIHtsaW5rcyAmJiBsaW5rcy5tYXAoKGxpbmssIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZihsaW5rLmhyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGtleT17aX0gaHJlZj17bGluay5ocmVmfT48aDI+e2xpbmsudGl0bGV9PC9oMj48L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBrZXk9e2l9IG9uQ2xpY2s9e2xpbmsuYWN0aW9ufT57bGluay50aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICAgICAgLmRyb3Bkb3duIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgLjNzIGVhc2U7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7YmFja2dyb3VuZH07XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7VGhlbWUuc2gubWF0fTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAke2lzQWN0aXZlID8gMTogMH07XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAke3dpZHRofTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke2hlaWdodH07XG4gICAgICAgICAgICAgICAgICAgIHRvcDogJHt0b3B9O1xuICAgICAgICAgICAgICAgICAgICByaWdodDogJHtpc0FjdGl2ZSA/IHJpZ2h0OiAwfTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR7aXNBY3RpdmUgPyAwOiAnMTUwJSd9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLmRyb3Bkb3duIGgyIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IDE2cHggJ1JvYm90byc7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke2JhY2tncm91bmQgPT09ICcjZmZmZmZmJyA/IFRoZW1lLmNvbG9ycy5kYXJrOiAnd2hpdGUnfTtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLmRyb3Bkb3duIGgyOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyMDAsMjAwLDIwMCwuNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBjb25zdCBUb2dnbGVTd2l0Y2ggPSAoe2FjdGl2ZSwgYWN0aXZlQ29sb3IsIG9uQ2xpY2ssIHRvcCwgcmlnaHQsIGZsb2F0TGVmdCA9IGZhbHNlfSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0b2dnbGUnIG9uQ2xpY2s9e29uQ2xpY2t9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NpcmNsZSc+PC9kaXY+XG4gICAgICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgICAgICAgLnRvZ2dsZSB7XG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiAke2Zsb2F0TGVmdCA/ICdsZWZ0JzogJyd9O1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJHtmbG9hdExlZnQgPyAncmVsYXRpdmUnOiAnYWJzb2x1dGUnfTtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAke3RvcH07XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAke3JpZ2h0fTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIC4zcyBlYXNlO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogNDBweDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAycHg7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7YWN0aXZlID8gVGhlbWUuY29sb3JzLmxpaWlnaHRwaW5rOiBUaGVtZS5jb2xvcnMucHVycGxlfTtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogJHtUaGVtZS5zaC5oYXJkbWF0fTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAuY2lyY2xlIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7VGhlbWUuc2guaGFyZG1hdH07XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAuM3MgZWFzZTtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxN3B4O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDE3cHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMnB4O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAke2FjdGl2ZSA/ICcycHgnOiAnNTAlJ307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBjb25zdCBIYW1idXJnZXJFeCA9ICh7YWN0aXZlLCBhY3RpdmVDb2xvciwgb25DbGljaywgdG9wLCByaWdodCwgZmxvYXRMZWZ0ID0gZmFsc2V9KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RvZ2dsZScgb25DbGljaz17b25DbGlja30+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbGluZSBvbmUnPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2xpbmUgdHdvJz48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdsaW5lIHRocmVlJz48L2Rpdj5cbiAgICAgICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAgICAgICAudG9nZ2xlIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQ6ICR7ZmxvYXRMZWZ0ID8gJ2xlZnQnOiAnJ307XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAke2Zsb2F0TGVmdCA/ICdyZWxhdGl2ZSc6ICdhYnNvbHV0ZSd9O1xuICAgICAgICAgICAgICAgICAgICB0b3A6ICR7dG9wfTtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICR7cmlnaHR9O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgLjNzIGVhc2U7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzMHB4O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMnB4O1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbiB3cmFwO1xuICAgICAgICAgICAgICAgICAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAubGluZSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7YWN0aXZlID8gVGhlbWUuY29sb3JzLmRhcms6ICd3aGl0ZSd9O1xuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAke1RoZW1lLnNoLmhhcmRtYXR9O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgLjNzIGVhc2U7XG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMnB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9PC9zdHlsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG4iXX0= */\n/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */`\n    }, void 0, false, void 0, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\nexport const ToggleSwitch = ({\n  active,\n  activeColor,\n  onClick,\n  top,\n  right,\n  floatLeft = false\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: _JSXStyle.dynamic([[\"1984731639\", [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.liiightpink : Theme.colors.purple, Theme.sh.hardmat, Theme.sh.hardmat, active ? '2px' : '50%']]]) + \" \" + 'toggle',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: _JSXStyle.dynamic([[\"1984731639\", [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.liiightpink : Theme.colors.purple, Theme.sh.hardmat, Theme.sh.hardmat, active ? '2px' : '50%']]]) + \" \" + 'circle'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(_JSXStyle, {\n      id: \"1984731639\",\n      dynamic: [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.liiightpink : Theme.colors.purple, Theme.sh.hardmat, Theme.sh.hardmat, active ? '2px' : '50%'],\n      children: `.toggle.__jsx-style-dynamic-selector{float:${floatLeft ? 'left' : ''};position:${floatLeft ? 'relative' : 'absolute'};top:${top};right:${right};-webkit-transition:all .3s ease;transition:all .3s ease;width:40px;height:20px;padding:2px;background:${active ? Theme.colors.liiightpink : Theme.colors.purple};box-shadow:${Theme.sh.hardmat};border-radius:12px;cursor:pointer;}.circle.__jsx-style-dynamic-selector{background:white;box-shadow:${Theme.sh.hardmat};-webkit-transition:all .3s ease;transition:all .3s ease;float:left;width:17px;height:17px;margin:2px;border-radius:50%;margin-left:${active ? '2px' : '50%'};}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */`\n    }, void 0, false, void 0, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\nexport const HamburgerEx = ({\n  active,\n  activeColor,\n  onClick,\n  top,\n  right,\n  floatLeft = false\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: _JSXStyle.dynamic([[\"1731730288\", [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.dark : 'white', Theme.sh.hardmat]]]) + \" \" + 'toggle',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: _JSXStyle.dynamic([[\"1731730288\", [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.dark : 'white', Theme.sh.hardmat]]]) + \" \" + 'line one'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: _JSXStyle.dynamic([[\"1731730288\", [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.dark : 'white', Theme.sh.hardmat]]]) + \" \" + 'line two'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: _JSXStyle.dynamic([[\"1731730288\", [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.dark : 'white', Theme.sh.hardmat]]]) + \" \" + 'line three'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(_JSXStyle, {\n      id: \"1731730288\",\n      dynamic: [floatLeft ? 'left' : '', floatLeft ? 'relative' : 'absolute', top, right, active ? Theme.colors.dark : 'white', Theme.sh.hardmat],\n      children: `.toggle.__jsx-style-dynamic-selector{float:${floatLeft ? 'left' : ''};position:${floatLeft ? 'relative' : 'absolute'};top:${top};right:${right};-webkit-transition:all .3s ease;transition:all .3s ease;width:30px;height:30px;background:red;padding:2px;cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-flow:column wrap;-ms-flex-flow:column wrap;flex-flow:column wrap;-webkit-align-content:space-between;-ms-flex-line-pack:space-between;align-content:space-between;}.line.__jsx-style-dynamic-selector{background:${active ? Theme.colors.dark : 'white'};box-shadow:${Theme.sh.hardmat};-webkit-transition:all .3s ease;transition:all .3s ease;float:left;width:100%;height:1px;margin:2px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/Users/williamforte/Canvas/SynapseFlash/components/elements.js */`\n    }, void 0, false, void 0, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/components/elements.js"],"names":["Children","useScroll","Theme","React","Link","ParallaxBanner","children","image","height","shadow","background","currentScroll","sh","mat","scrollY","Row","Component","render","colcount","count","props","newchildren","map","child","cloneElement","width","padding","margin","overflow","Col","mobileDisplay","getDate","datetime","first","split","date","second","time","Date","When","condition","DropDown","top","right","isActive","links","colors","dark","link","i","href","title","action","ToggleSwitch","active","activeColor","onClick","floatLeft","liiightpink","purple","hardmat","HamburgerEx"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAO,SAASC,cAAT,CAAwB;AAACC,EAAAA,QAAD;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,MAAlB;AAA0BC,EAAAA,MAAM,GAAG,KAAnC;AAA0CC,EAAAA,UAAU,GAAG;AAAvD,CAAxB,EAAyF;AAC5F,QAAMC,aAAa,GAAGV,SAAS,EAA/B;AACA,sBACI;AAAA,iDAMsBO,MANtB,EAO0BE,UAP1B,EAU0BD,MAAM,GAAGP,KAAK,CAACU,EAAN,CAASC,GAAZ,GAAiB,IAVjD,EAkB0B,CAACF,aAAa,CAACG,OAAf,GAAyB,CAlBnD,aAAe,QAAf;AAAA,4BACI;AAAyB,MAAA,GAAG,EAAEP,KAA9B;AAAA,mDAKkBC,MALlB,EAMsBE,UANtB,EASsBD,MAAM,GAAGP,KAAK,CAACU,EAAN,CAASC,GAAZ,GAAiB,IAT7C,EAiBsB,CAACF,aAAa,CAACG,OAAf,GAAyB,CAjB/C,aAAe;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ;AAAA;AAAA,gBAMsBN,MANtB,EAO0BE,UAP1B,EAU0BD,MAAM,GAAGP,KAAK,CAACU,EAAN,CAASC,GAAZ,GAAiB,IAVjD,EAkB0B,CAACF,aAAa,CAACG,OAAf,GAAyB,CAlBnD;AAAA,qFAMsBN,MANtB,eAO0BE,UAP1B,iDAU0BD,MAAM,GAAGP,KAAK,CAACU,EAAN,CAASC,GAAZ,GAAiB,IAVjD,sQAkB0B,CAACF,aAAa,CAACG,OAAf,GAAyB,CAlBnD;AACR;AACA;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH;AAED,OAAO,MAAMC,GAAN,SAAkBZ,KAAK,CAACa,SAAxB,CAAkC;AACrCC,EAAAA,MAAM,GAAI;AACN,UAAMC,QAAQ,GAAGf,KAAK,CAACH,QAAN,CAAemB,KAAf,CAAqB,KAAKC,KAAL,CAAWd,QAAhC,CAAjB;AACA,UAAMe,WAAW,GAAGlB,KAAK,CAACH,QAAN,CAAesB,GAAf,CAAmB,KAAKF,KAAL,CAAWd,QAA9B,EAAwCiB,KAAK,IAAI;AACjE,0BAAOpB,KAAK,CAACqB,YAAN,CAAmBD,KAAnB,EAA0B;AAACE,QAAAA,KAAK,EAAG,MAAMP,QAAf;AAA0BV,QAAAA,MAAM,EAAE,KAAKY,KAAL,CAAWZ;AAA7C,OAA1B,CAAP;AACH,KAFmB,CAApB;AAGA,wBACI;AAAA,mDAKqB,KAAKY,KAAL,CAAWM,OAAX,GAAqB,MAAO,KAAKN,KAAL,CAAWM,OAAX,GAAqB,CAAjD,GAAqD,GAL1E,EAMyB,KAAKN,KAAL,CAAWM,OANpC,EAOsB,KAAKN,KAAL,CAAWO,MAPjC,EAQ0B,KAAKP,KAAL,CAAWV,UARrC,EAUwB,KAAKU,KAAL,CAAWQ,QAVnC,EAWsB,KAAKR,KAAL,CAAWZ,MAXjC,aAAe,KAAf;AAAA,iBACKa,WADL;AAAA;AAAA,kBAKqB,KAAKD,KAAL,CAAWM,OAAX,GAAqB,MAAO,KAAKN,KAAL,CAAWM,OAAX,GAAqB,CAAjD,GAAqD,GAL1E,EAMyB,KAAKN,KAAL,CAAWM,OANpC,EAOsB,KAAKN,KAAL,CAAWO,MAPjC,EAQ0B,KAAKP,KAAL,CAAWV,UARrC,EAUwB,KAAKU,KAAL,CAAWQ,QAVnC,EAWsB,KAAKR,KAAL,CAAWZ,MAXjC;AAAA,wEAKqB,KAAKY,KAAL,CAAWM,OAAX,GAAqB,MAAO,KAAKN,KAAL,CAAWM,OAAX,GAAqB,CAAjD,GAAqD,GAL1E,eAMyB,KAAKN,KAAL,CAAWM,OANpC,YAOsB,KAAKN,KAAL,CAAWO,MAPjC,iBAQ0B,KAAKP,KAAL,CAAWV,UARrC,8BAUwB,KAAKU,KAAL,CAAWQ,QAVnC,WAWsB,KAAKR,KAAL,CAAWZ,MAXjC;AACZ;AACA;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsBH;;AA5BoC;AA+BzC,OAAO,MAAMqB,GAAG,GAAG,CAAC;AAACH,EAAAA,OAAD;AAAUpB,EAAAA,QAAV;AAAoBI,EAAAA,UAApB;AAAgCiB,EAAAA,MAAhC;AAAwCF,EAAAA,KAAxC;AAA+CjB,EAAAA,MAA/C;AAAuDsB,EAAAA;AAAvD,CAAD,KAA2E;AAC1F,sBACI;AAAA,kDAMqBL,KANrB,EAOuBC,OAPvB,EAQsBC,MARtB,EAS0BjB,UAT1B,EAWsBF,MAXtB,EAgB2BsB,aAAa,IAAI,KAAjB,GAAyB,MAAzB,GAAiC,OAhB5D,aAAe,KAAf;AAAA,eACKxB,QADL;AAAA;AAAA,gBAMqBmB,KANrB,EAOuBC,OAPvB,EAQsBC,MARtB,EAS0BjB,UAT1B,EAWsBF,MAXtB,EAgB2BsB,aAAa,IAAI,KAAjB,GAAyB,MAAzB,GAAiC,OAhB5D;AAAA,wFAMqBL,KANrB,aAOuBC,OAPvB,WAQsBC,MARtB,eAS0BjB,UAT1B,4BAWsBF,MAXtB,mGAgB2BsB,aAAa,IAAI,KAAjB,GAAyB,MAAzB,GAAiC,OAhB5D;AACR;AACA;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CAxBM;AA0BP,OAAO,SAASC,OAAT,CAAiBC,QAAjB,EAA2B;AAC9B,QAAMC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAd;AACA,QAAMC,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAlB;AACA,QAAMG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAe,GAAf,CAAf;AACA,QAAMG,IAAI,GAAGD,MAAM,CAAC,CAAD,CAAnB;AACA,SAAO;AAAED,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAP;AACH;AAED,OAAO,MAAMC,IAAI,GAAG,CAAC;AAACN,EAAAA;AAAD,CAAD,KAAgB;AAChC,QAAMG,IAAI,GAAGH,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAb;AACA,QAAMG,IAAI,GAAGF,IAAI,CAACD,KAAL,CAAW,GAAX,CAAb;AACA,SAAOC,IAAI,CAAC,CAAD,CAAJ,EAASE,IAAI,CAAC,CAAD,CAApB;AACH,CAJM;AAMP,OAAO,SAASE,IAAT,CAAc;AAACC,EAAAA,SAAD;AAAYlC,EAAAA;AAAZ,CAAd,EAAqC;AACxC,MAAGkC,SAAH,EAAc;AACV,WAAOlC,QAAP;AACH,GAFD,MAEO;AACH,WAAO,IAAP;AACH;AACJ;AAED,OAAO,MAAMmC,QAAQ,GAAG,CAAC;AAAChB,EAAAA,KAAD;AAAQjB,EAAAA,MAAR;AAAgBkC,EAAAA,GAAhB;AAAqBC,EAAAA,KAArB;AAA4BC,EAAAA,QAA5B;AAAsCC,EAAAA,KAAtC;AAA6CvC,EAAAA,QAA7C;AAAuDI,EAAAA;AAAvD,CAAD,KAAwE;AAC5F,sBACI;AAAA,kDAiB0BA,UAjB1B,EAkB0BR,KAAK,CAACU,EAAN,CAASC,GAlBnC,EAoBuB+B,QAAQ,GAAG,CAAH,GAAM,CApBrC,EAqBqBnB,KArBrB,EAsBsBjB,MAtBtB,EAuBmBkC,GAvBnB,EAwBqBE,QAAQ,GAAGD,KAAH,GAAU,CAxBvC,EAyBoCC,QAAQ,GAAG,CAAH,GAAM,MAzBlD,EAgCqBlC,UAAU,KAAK,SAAf,GAA2BR,KAAK,CAAC4C,MAAN,CAAaC,IAAxC,GAA8C,OAhCnE,aAAe,UAAf;AAAA,eACKzC,QADL,EAEKuC,KAAK,IAAIA,KAAK,CAACvB,GAAN,CAAU,CAAC0B,IAAD,EAAOC,CAAP,KAAa;AAC7B,UAAGD,IAAI,CAACE,IAAR,EAAc;AACV,4BACI,QAAC,IAAD;AAAc,UAAA,IAAI,EAAEF,IAAI,CAACE,IAAzB;AAAA,iCAA+B;AAAA,0DAYrBxC,UAZqB,EAarBR,KAAK,CAACU,EAAN,CAASC,GAbY,EAexB+B,QAAQ,GAAG,CAAH,GAAM,CAfU,EAgB1BnB,KAhB0B,EAiBzBjB,MAjByB,EAkB5BkC,GAlB4B,EAmB1BE,QAAQ,GAAGD,KAAH,GAAU,CAnBQ,EAoBXC,QAAQ,GAAG,CAAH,GAAM,MApBH,EA2B1BlC,UAAU,KAAK,SAAf,GAA2BR,KAAK,CAAC4C,MAAN,CAAaC,IAAxC,GAA8C,OA3BpB;AAAA,sBAAKC,IAAI,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA;AAA/B,WAAWF,CAAX;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH,OAJD,MAIO;AACH,4BACI;AAAY,UAAA,OAAO,EAAED,IAAI,CAACI,MAA1B;AAAA,wDAQU1C,UARV,EASUR,KAAK,CAACU,EAAN,CAASC,GATnB,EAWO+B,QAAQ,GAAG,CAAH,GAAM,CAXrB,EAYKnB,KAZL,EAaMjB,MAbN,EAcGkC,GAdH,EAeKE,QAAQ,GAAGD,KAAH,GAAU,CAfvB,EAgBoBC,QAAQ,GAAG,CAAH,GAAM,MAhBlC,EAuBKlC,UAAU,KAAK,SAAf,GAA2BR,KAAK,CAAC4C,MAAN,CAAaC,IAAxC,GAA8C,OAvBnD;AAAA,oBAAmCC,IAAI,CAACG;AAAxC,WAASF,CAAT;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH;AACJ,KAVS,CAFd;AAAA;AAAA,gBAiB0BvC,UAjB1B,EAkB0BR,KAAK,CAACU,EAAN,CAASC,GAlBnC,EAoBuB+B,QAAQ,GAAG,CAAH,GAAM,CApBrC,EAqBqBnB,KArBrB,EAsBsBjB,MAtBtB,EAuBmBkC,GAvBnB,EAwBqBE,QAAQ,GAAGD,KAAH,GAAU,CAxBvC,EAyBoCC,QAAQ,GAAG,CAAH,GAAM,MAzBlD,EAgCqBlC,UAAU,KAAK,SAAf,GAA2BR,KAAK,CAAC4C,MAAN,CAAaC,IAAxC,GAA8C,OAhCnE;AAAA,+IAiB0BrC,UAjB1B,eAkB0BR,KAAK,CAACU,EAAN,CAASC,GAlBnC,8BAoBuB+B,QAAQ,GAAG,CAAH,GAAM,CApBrC,UAqBqBnB,KArBrB,WAsBsBjB,MAtBtB,QAuBmBkC,GAvBnB,UAwBqBE,QAAQ,GAAGD,KAAH,GAAU,CAxBvC,iCAyBoCC,QAAQ,GAAG,CAAH,GAAM,MAzBlD,8BAyBoCA,QAAQ,GAAG,CAAH,GAAM,MAzBlD,0BAyBoCA,QAAQ,GAAG,CAAH,GAAM,MAzBlD,8IAgCqBlC,UAAU,KAAK,SAAf,GAA2BR,KAAK,CAAC4C,MAAN,CAAaC,IAAxC,GAA8C,OAhCnE;AACR;AACA;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4CH,CA7CM;AA+CP,OAAO,MAAMM,YAAY,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,OAAtB;AAA+Bd,EAAAA,GAA/B;AAAoCC,EAAAA,KAApC;AAA2Cc,EAAAA,SAAS,GAAG;AAAvD,CAAD,KAAmE;AAC3F,sBACI;AAAwB,IAAA,OAAO,EAAED,OAAjC;AAAA,kDAIqBC,SAAS,GAAG,MAAH,GAAW,EAJzC,EAKwBA,SAAS,GAAG,UAAH,GAAe,UALhD,EAMmBf,GANnB,EAOqBC,KAPrB,EAY0BW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaY,WAAhB,GAA6BxD,KAAK,CAAC4C,MAAN,CAAaa,MAZ1E,EAa0BzD,KAAK,CAACU,EAAN,CAASgD,OAbnC,EAmB0B1D,KAAK,CAACU,EAAN,CAASgD,OAnBnC,EA0B2BN,MAAM,GAAG,KAAH,GAAU,KA1B3C,aAAe,QAAf;AAAA,4BACI;AAAA,oDAGiBG,SAAS,GAAG,MAAH,GAAW,EAHrC,EAIoBA,SAAS,GAAG,UAAH,GAAe,UAJ5C,EAKef,GALf,EAMiBC,KANjB,EAWsBW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaY,WAAhB,GAA6BxD,KAAK,CAAC4C,MAAN,CAAaa,MAXtE,EAYsBzD,KAAK,CAACU,EAAN,CAASgD,OAZ/B,EAkBsB1D,KAAK,CAACU,EAAN,CAASgD,OAlB/B,EAyBuBN,MAAM,GAAG,KAAH,GAAU,KAzBvC,aAAe;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ;AAAA;AAAA,gBAIqBG,SAAS,GAAG,MAAH,GAAW,EAJzC,EAKwBA,SAAS,GAAG,UAAH,GAAe,UALhD,EAMmBf,GANnB,EAOqBC,KAPrB,EAY0BW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaY,WAAhB,GAA6BxD,KAAK,CAAC4C,MAAN,CAAaa,MAZ1E,EAa0BzD,KAAK,CAACU,EAAN,CAASgD,OAbnC,EAmB0B1D,KAAK,CAACU,EAAN,CAASgD,OAnBnC,EA0B2BN,MAAM,GAAG,KAAH,GAAU,KA1B3C;AAAA,8DAIqBG,SAAS,GAAG,MAAH,GAAW,EAJzC,aAKwBA,SAAS,GAAG,UAAH,GAAe,UALhD,QAMmBf,GANnB,UAOqBC,KAPrB,0GAY0BW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaY,WAAhB,GAA6BxD,KAAK,CAAC4C,MAAN,CAAaa,MAZ1E,eAa0BzD,KAAK,CAACU,EAAN,CAASgD,OAbnC,wGAmB0B1D,KAAK,CAACU,EAAN,CAASgD,OAnBnC,uIA0B2BN,MAAM,GAAG,KAAH,GAAU,KA1B3C;AACR;AACA;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH,CAjCM;AAmCP,OAAO,MAAMO,WAAW,GAAG,CAAC;AAACP,EAAAA,MAAD;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,OAAtB;AAA+Bd,EAAAA,GAA/B;AAAoCC,EAAAA,KAApC;AAA2Cc,EAAAA,SAAS,GAAG;AAAvD,CAAD,KAAmE;AAC1F,sBACI;AAAwB,IAAA,OAAO,EAAED,OAAjC;AAAA,kDAMqBC,SAAS,GAAG,MAAH,GAAW,EANzC,EAOwBA,SAAS,GAAG,UAAH,GAAe,UAPhD,EAQmBf,GARnB,EASqBC,KATrB,EAuB0BW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaC,IAAhB,GAAsB,OAvBtD,EAwB0B7C,KAAK,CAACU,EAAN,CAASgD,OAxBnC,aAAe,QAAf;AAAA,4BACI;AAAA,oDAKiBH,SAAS,GAAG,MAAH,GAAW,EALrC,EAMoBA,SAAS,GAAG,UAAH,GAAe,UAN5C,EAOef,GAPf,EAQiBC,KARjB,EAsBsBW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaC,IAAhB,GAAsB,OAtBlD,EAuBsB7C,KAAK,CAACU,EAAN,CAASgD,OAvB/B,aAAe;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,oDAIiBH,SAAS,GAAG,MAAH,GAAW,EAJrC,EAKoBA,SAAS,GAAG,UAAH,GAAe,UAL5C,EAMef,GANf,EAOiBC,KAPjB,EAqBsBW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaC,IAAhB,GAAsB,OArBlD,EAsBsB7C,KAAK,CAACU,EAAN,CAASgD,OAtB/B,aAAe;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,oDAGiBH,SAAS,GAAG,MAAH,GAAW,EAHrC,EAIoBA,SAAS,GAAG,UAAH,GAAe,UAJ5C,EAKef,GALf,EAMiBC,KANjB,EAoBsBW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaC,IAAhB,GAAsB,OApBlD,EAqBsB7C,KAAK,CAACU,EAAN,CAASgD,OArB/B,aAAe;AAAf;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA,gBAMqBH,SAAS,GAAG,MAAH,GAAW,EANzC,EAOwBA,SAAS,GAAG,UAAH,GAAe,UAPhD,EAQmBf,GARnB,EASqBC,KATrB,EAuB0BW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaC,IAAhB,GAAsB,OAvBtD,EAwB0B7C,KAAK,CAACU,EAAN,CAASgD,OAxBnC;AAAA,8DAMqBH,SAAS,GAAG,MAAH,GAAW,EANzC,aAOwBA,SAAS,GAAG,UAAH,GAAe,UAPhD,QAQmBf,GARnB,UASqBC,KATrB,qmBAuB0BW,MAAM,GAAGpD,KAAK,CAAC4C,MAAN,CAAaC,IAAhB,GAAsB,OAvBtD,eAwB0B7C,KAAK,CAACU,EAAN,CAASgD,OAxBnC;AACR;AACA;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CApCM","sourcesContent":["import { Children } from \"react\";\nimport { useScroll } from '../components/hooks'\nimport Theme from \"../styles/theme\";\nimport React from 'react'\nimport Link from 'next/link'\n\nexport function ParallaxBanner({children, image, height, shadow = false, background = 'white'}) {\n    const currentScroll = useScroll();\n    return (\n        <div className='banner'>\n            <img className='main_bg' src={image}/>\n            <style jsx>{`\n                .banner {\n                    float: left;\n                    width: 100%;\n                    height: ${height};\n                    background: ${background};\n                    overflow: hidden;\n                    position: relative;\n                    box-shadow: ${shadow ? Theme.sh.mat: null};\n                }\n                .main_bg {\n                    position: absolute;\n                    top: 50%;\n                    left: 50%;\n                    width: 100%;\n                    transform: translate(-50%,-50%) translate3d(0,0,0);\n                    margin-top: ${-currentScroll.scrollY / 4}px;\n                    transition: all .1s ease;\n                }\n            `}</style>\n        </div>\n    )\n}\n\nexport class Row extends React.Component {\n    render () {\n        const colcount = React.Children.count(this.props.children)\n        const newchildren = React.Children.map(this.props.children, child => {\n            return React.cloneElement(child, {width: (100 / colcount), height: this.props.height})\n        })\n        return (\n            <div className='row'>\n                {newchildren}\n                <style jsx>{`\n                    .row {\n                        float: left;\n                        width: ${this.props.padding ? 100 - (this.props.padding * 2): 100}%;\n                        padding: 0 ${this.props.padding}%;\n                        margin: ${this.props.margin} 0;\n                        background: ${this.props.background};\n                        min-height: 200px;\n                        overflow: ${this.props.overflow};\n                        height: ${this.props.height};\n                    }\n                    @media only screen and (max-width: 650px) {\n                        .row {\n                            height: auto;\n                        }\n                    }\n                `}</style>\n            </div>\n        )        \n    }\n}\n\nexport const Col = ({padding, children, background, margin, width, height, mobileDisplay}) => {\n    return (\n        <div className='col'>\n            {children}\n            <style jsx>{`\n                .col {\n                    float: left;\n                    position: relative;\n                    width: ${width}%;\n                    padding: ${padding};\n                    margin: ${margin};\n                    background: ${background};\n                    min-height: 200px;\n                    height: ${height};\n                }\n                @media only screen and (max-width: 650px) {\n                    .col {\n                        width: 100%;\n                        display: ${mobileDisplay == false ? 'none': 'block'};\n                    }\n                }\n            `}</style>\n        </div>\n    )\n}\n\nexport function getDate(datetime) {\n    const first = datetime.split('T')\n    const date = first[0]\n    const second = first[1].split('Z')\n    const time = second[0]\n    return { date, time };\n}\n\nexport const Date = ({datetime}) => {\n    const date = datetime.split('T')\n    const time = date.split('Z')\n    return date[0], time[0]\n}\n\nexport function When({condition, children}) {\n    if(condition) {\n        return children\n    } else {\n        return null\n    }\n}\n\nexport const DropDown = ({width, height, top, right, isActive, links, children, background}) => {\n    return (\n        <div className='dropdown'>\n            {children}\n            {links && links.map((link, i) => {\n                if(link.href) {\n                    return (\n                        <Link key={i} href={link.href}><h2>{link.title}</h2></Link>\n                    )\n                } else {    \n                    return (\n                        <h2 key={i} onClick={link.action}>{link.title}</h2>\n                    )\n                }\n            })}\n            <style jsx>{`\n                .dropdown {\n                    position: absolute;\n                    transition: all .3s ease;\n                    background: ${background};\n                    box-shadow: ${Theme.sh.mat};\n                    border-radius: 4px;\n                    opacity: ${isActive ? 1: 0};\n                    width: ${width};\n                    height: ${height};\n                    top: ${top};\n                    right: ${isActive ? right: 0};\n                    transform: translateX(${isActive ? 0: '150%'});\n                }\n                .dropdown h2 {\n                    float: left;\n                    width: 100%;\n                    text-align: center;\n                    font: 16px 'Roboto';\n                    color: ${background === '#ffffff' ? Theme.colors.dark: 'white'};\n                    cursor: pointer;\n                    margin: 0;\n                    padding: 10px 0;\n                }\n                .dropdown h2:hover {\n                    background: rgba(200,200,200,.4);\n                }\n            `}</style>\n        </div>\n    )\n}\n\nexport const ToggleSwitch = ({active, activeColor, onClick, top, right, floatLeft = false}) => {\n    return (\n        <div className='toggle' onClick={onClick}>\n            <div className='circle'></div>\n            <style jsx>{`\n                .toggle {\n                    float: ${floatLeft ? 'left': ''};\n                    position: ${floatLeft ? 'relative': 'absolute'};\n                    top: ${top};\n                    right: ${right};\n                    transition: all .3s ease;\n                    width: 40px;\n                    height: 20px;\n                    padding: 2px;\n                    background: ${active ? Theme.colors.liiightpink: Theme.colors.purple};\n                    box-shadow: ${Theme.sh.hardmat};\n                    border-radius: 12px;\n                    cursor: pointer;\n                }\n                .circle {\n                    background: white;\n                    box-shadow: ${Theme.sh.hardmat};\n                    transition: all .3s ease;\n                    float: left;\n                    width: 17px;\n                    height: 17px;\n                    margin: 2px;\n                    border-radius: 50%;\n                    margin-left: ${active ? '2px': '50%'};\n                }\n            `}</style>\n        </div>\n    )\n}\n\nexport const HamburgerEx = ({active, activeColor, onClick, top, right, floatLeft = false}) => {\n    return (\n        <div className='toggle' onClick={onClick}>\n            <div className='line one'></div>\n            <div className='line two'></div>\n            <div className='line three'></div>\n            <style jsx>{`\n                .toggle {\n                    float: ${floatLeft ? 'left': ''};\n                    position: ${floatLeft ? 'relative': 'absolute'};\n                    top: ${top};\n                    right: ${right};\n                    transition: all .3s ease;\n                    width: 30px;\n                    height: 30px;\n                    background: red;\n                    padding: 2px;\n                    cursor: pointer;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    flex-flow: column wrap;\n                    align-content: space-between;\n                }\n                .line {\n                    background: ${active ? Theme.colors.dark: 'white'};\n                    box-shadow: ${Theme.sh.hardmat};\n                    transition: all .3s ease;\n                    float: left;\n                    width: 100%;\n                    height: 1px;\n                    margin: 2px;\n                }\n            `}</style>\n        </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}