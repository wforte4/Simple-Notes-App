{"ast":null,"code":"import * as types from '../types';\nimport { getProjects } from '../../services/projectservice';\nimport { loginRequest, getAllUsers, patchUser } from '../../services/apiservice';\nimport jwt_decode from 'jwt-decode';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport { getThoughts } from '../../services/thoughtservice';\nconst cookies = new Cookies();\nexport const fetchThoughts = (email, auth) => async dispatch => {\n  const res = await getThoughts(email, auth);\n  console.log(res);\n  dispatch({\n    type: types.GET_THOUGHTS,\n    payload: res.length > 0 ? res : null\n  });\n};\nexport const updateProfile = (userId, token, inputs) => async dispatch => {\n  console.log(token);\n  const res = await patchUser(userId, token, inputs);\n  console.log(res);\n};\nexport const getAllUsersAdmin = (token, limit) => async dispatch => {\n  const res = await getAllUsers(token, limit);\n  console.log(res);\n  if (res === 403 || res === 401) await Router.push(`/error?errorMessage=${res}`);\n  dispatch({\n    type: types.GET_ALLUSERS,\n    payload: res.length > 0 ? res : null,\n    error: null,\n    errorMessage: null\n  });\n};\nexport const signIn = (email, password) => async dispatch => {\n  const res = await loginRequest(email, password);\n  console.log(res);\n\n  if (res === 400) {\n    dispatch({\n      type: types.FAILEDLOGIN,\n      payload: 400,\n      errorMessage: 'Invalid Email or Password'\n    });\n    return;\n  }\n\n  const decoded = jwt_decode(res.accessToken);\n  cookies.set('user', decoded);\n  cookies.set('auth', res);\n  dispatch({\n    type: types.AUTH,\n    payload: res\n  });\n  dispatch({\n    type: types.LOGIN,\n    payload: decoded\n  });\n  await Router.push('/');\n};\nexport const signOut = () => async dispatch => {\n  cookies.remove('user');\n  cookies.remove('auth');\n  dispatch({\n    type: types.LOGOUT,\n    payload: null\n  });\n  await Router.push(\"/login\");\n};","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/store/actions/postAction.js"],"names":["types","getProjects","loginRequest","getAllUsers","patchUser","jwt_decode","Router","Cookies","getThoughts","cookies","fetchThoughts","email","auth","dispatch","res","console","log","type","GET_THOUGHTS","payload","length","updateProfile","userId","token","inputs","getAllUsersAdmin","limit","push","GET_ALLUSERS","error","errorMessage","signIn","password","FAILEDLOGIN","decoded","accessToken","set","AUTH","LOGIN","signOut","remove","LOGOUT"],"mappings":"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","sourcesContent":["import * as types from '../types'\nimport { getProjects } from '../../services/projectservice'\nimport { loginRequest, getAllUsers, patchUser } from '../../services/apiservice'\nimport jwt_decode from 'jwt-decode';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport { getThoughts } from '../../services/thoughtservice';\n\nconst cookies = new Cookies();\n\nexport const fetchThoughts = (email, auth) => async dispatch => {\n    const res = await getThoughts(email, auth)\n    console.log(res)\n    dispatch({\n        type: types.GET_THOUGHTS,\n        payload: res.length > 0 ? res: null\n    })\n}\n\nexport const updateProfile = (userId, token, inputs) => async dispatch => {\n    console.log(token)\n    const res = await patchUser(userId, token, inputs);\n    console.log(res)\n}\n\nexport const getAllUsersAdmin = (token, limit) => async dispatch => {\n    const res = await getAllUsers(token, limit);\n    console.log(res)\n    if(res === 403 || res === 401) await Router.push(`/error?errorMessage=${res}`)\n    dispatch({\n        type: types.GET_ALLUSERS,\n        payload: res.length > 0 ? res: null,\n        error: null,\n        errorMessage: null\n    })\n}\n\nexport const signIn = (email, password) => async dispatch => {\n    const res = await loginRequest(email, password)\n    console.log(res)\n    if(res === 400) {\n        dispatch({\n            type: types.FAILEDLOGIN,\n            payload: 400,\n            errorMessage: 'Invalid Email or Password'\n        })\n        return\n    }\n    const decoded = jwt_decode(res.accessToken)\n    cookies.set('user', decoded)\n    cookies.set('auth', res)\n    dispatch({\n        type: types.AUTH,\n        payload: res\n    })\n    dispatch({\n        type: types.LOGIN,\n        payload: decoded\n    })\n    await Router.push('/')\n}\n\nexport const signOut = () => async dispatch => {\n    cookies.remove('user')\n    cookies.remove('auth')\n    dispatch({\n        type: types.LOGOUT,\n        payload: null\n    })\n    await Router.push(\"/login\");\n}"]},"metadata":{},"sourceType":"module"}