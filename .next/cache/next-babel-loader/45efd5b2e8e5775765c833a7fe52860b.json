{"ast":null,"code":"import Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport jwt_decode from 'jwt-decode';\nimport { baseConfig } from './restservice';\nconst cookies = new Cookies();\nexport async function createProfile(firstname, lastname, email, password) {\n  // Request data to post to createprofile route on rest api\n  fetch(baseConfig.baseURL + '/users', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"firstName\": firstname,\n      \"lastName\": lastname,\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log('Request succeeded with JSON response', data);\n  }).catch(function (error) {\n    console.log('Request failed', error);\n  });\n}\nexport async function loginRequest(email, password) {\n  // New Login Data request\n  const newLogin = await fetch(baseConfig.baseURL + '/auth', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    cookies.set('accessToken', data.accessToken);\n    cookies.set('refreshToken', data.refreshToken);\n    const decoded = jwt_decode(data.accessToken);\n    cookies.set('name', decoded.name);\n    cookies.set('email', decoded.email);\n    cookies.set('refreshKey', decoded.refreshKey);\n    cookies.set('permission_level', decoded.permissionLevel);\n    cookies.set('userId', decoded.userId);\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newLogin) {\n    return \"Username/Password does not match our records!\";\n  }\n}\nexport async function Logout() {\n  cookies.remove('accessToken');\n  cookies.remove('permission_level');\n  cookies.remove('refreshToken');\n  cookies.remove('name');\n  cookies.remove('email');\n  cookies.remove('refreshKey');\n  cookies.remove('userId');\n  await Router.push(\"/login\");\n}\nexport async function submitContact(name, message, email, cellphone) {\n  // Request data to post to createprofile route on rest api\n  const newfetch = await fetch(baseConfig.baseURL + '/contact', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"name\": name,\n      \"message\": message,\n      \"cellphone\": cellphone,\n      \"email\": email\n    })\n  }).then(function (res) {\n    return res.status;\n  }).catch(function (error) {\n    console.log('Request failed', error);\n  });\n\n  if (newfetch) {\n    return newfetch;\n  } else {\n    return 404;\n  }\n}\nexport async function createTask(objective, status, priority, assignee) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(baseConfig.baseURL + '/tasks', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken}`\n    },\n    body: JSON.stringify({\n      \"objective\": objective,\n      \"status\": status,\n      \"priority\": priority,\n      \"assignee\": assignee\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function getTasks(limit, token) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(baseConfig.baseURL + '/tasks?limit=' + limit, {\n    method: 'GET',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    }\n  }).then(function (response) {\n    if (response.status == 403) {\n      return 'Not Authorized';\n    }\n\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function removeTask(taskId) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(baseConfig.baseURL + `/tasks/${taskId}`, {\n    method: 'DELETE',\n    headers: {\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    }\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function updateTaskStatus(taskId, newstatus) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(baseConfig.baseURL + `/tasks/${taskId}`, {\n    method: 'PATCH',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    },\n    body: JSON.stringify({\n      \"status\": newstatus\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function searchProjects(newQuery) {\n  // New Login Data request\n  const newSearch = await fetch(baseConfig.baseURL + `/searchprojects/` + newQuery, {\n    method: 'GET',\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newSearch) {\n    return newSearch;\n  }\n}","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/services/apiservice.js"],"names":["Router","Cookies","jwt_decode","baseConfig","cookies","createProfile","firstname","lastname","email","password","fetch","baseURL","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","loginRequest","newLogin","set","accessToken","refreshToken","decoded","name","refreshKey","permissionLevel","userId","Logout","remove","push","submitContact","message","cellphone","newfetch","res","status","createTask","objective","priority","assignee","getCookies","getAll","newTask","getTasks","limit","token","removeTask","taskId","updateTaskStatus","newstatus","searchProjects","newQuery","newSearch"],"mappings":"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","sourcesContent":["import Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport jwt_decode from 'jwt-decode';\nimport { baseConfig } from './restservice';\n\nconst cookies = new Cookies();\n\nexport async function createProfile(firstname, lastname, email, password) {\n    // Request data to post to createprofile route on rest api\n    fetch(baseConfig.baseURL + '/users', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"firstName\": firstname,\n            \"lastName\": lastname,\n            \"email\": email,\n            \"password\": password\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response', data);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n}\n\nexport async function loginRequest(email, password) {\n    // New Login Data request\n    const newLogin = await fetch(baseConfig.baseURL + '/auth', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"email\": email,\n            \"password\": password\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        cookies.set('accessToken', data.accessToken);\n        cookies.set('refreshToken', data.refreshToken);\n        const decoded = jwt_decode(data.accessToken);\n        cookies.set('name', decoded.name)\n        cookies.set('email', decoded.email)\n        cookies.set('refreshKey', decoded.refreshKey)\n        cookies.set('permission_level', decoded.permissionLevel)\n        cookies.set('userId', decoded.userId)\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newLogin) {\n        return \"Username/Password does not match our records!\"\n    }\n}\n\nexport async function Logout() {\n    cookies.remove('accessToken');\n    cookies.remove('permission_level')\n    cookies.remove('refreshToken');\n    cookies.remove('name')\n    cookies.remove('email')\n    cookies.remove('refreshKey')\n    cookies.remove('userId')\n    await Router.push(\"/login\");\n}\n\nexport async function submitContact(name, message, email, cellphone) {\n    // Request data to post to createprofile route on rest api\n    const newfetch = await fetch(baseConfig.baseURL + '/contact', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"name\": name,\n            \"message\": message,\n            \"cellphone\": cellphone,\n            \"email\": email\n        })\n    })\n    .then(function(res) {\n        return res.status\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n\n    if(newfetch) {\n        return newfetch\n    } else {\n        return 404\n    }\n}\n\nexport async function createTask(objective, status, priority, assignee) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(baseConfig.baseURL + '/tasks', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken}`\n        },\n        body: JSON.stringify({\n            \"objective\": objective,\n            \"status\": status,\n            \"priority\": priority,\n            \"assignee\": assignee,\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function getTasks(limit, token) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(baseConfig.baseURL + '/tasks?limit=' + limit, {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        }\n    })\n    .then(function(response) {\n        if(response.status == 403) {\n            return 'Not Authorized'\n        }\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function removeTask(taskId) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(baseConfig.baseURL + `/tasks/${taskId}`, {\n        method: 'DELETE',\n        headers: {\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        }\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function updateTaskStatus(taskId, newstatus) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(baseConfig.baseURL + `/tasks/${taskId}`, {\n        method: 'PATCH',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        },\n        body: JSON.stringify({\n            \"status\": newstatus\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function searchProjects(newQuery) {\n    // New Login Data request\n    const newSearch = await fetch(baseConfig.baseURL + `/searchprojects/` + newQuery, {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newSearch) {\n        return newSearch\n    }\n}\n"]},"metadata":{},"sourceType":"module"}