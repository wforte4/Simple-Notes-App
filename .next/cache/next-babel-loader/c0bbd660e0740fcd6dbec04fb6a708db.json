{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _JSXStyle from \"styled-jsx/style\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Theme from \"../styles/theme\";\nimport { useState } from 'react';\nimport { changePassword } from '../services/apiservice';\nimport Link from 'next/link';\nimport { When } from \"../components/elements\";\n\nfunction ChangePassword({\n  auth\n}) {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({\n    newpass: '',\n    confirmpass: ''\n  });\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: confirmation,\n    1: setConfirmation\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n\n  const handleType = e => {\n    e.persist();\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n\n    if (inputs.newpass === inputs.confirmpass) {\n      const response = await changePassword(auth, inputs.newpass);\n      console.log(response);\n      setLoading(false);\n      setConfirmation(true);\n    } else {\n      setLoading(false);\n      setError('Passwords do not match');\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]) + \" \" + 'forgotpass',\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]) + \" \" + 'center',\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]),\n        children: \"Change Password\"\n      }), /*#__PURE__*/_jsx(When, {\n        condition: !loading && !confirmation,\n        children: /*#__PURE__*/_jsxs(\"form\", {\n          onSubmit: handleSubmit,\n          className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]),\n          children: [/*#__PURE__*/_jsx(\"input\", {\n            name: \"newpass\",\n            type: \"password\",\n            value: inputs.newpass,\n            onChange: handleType,\n            placeholder: \"New Password\",\n            required: true,\n            className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]])\n          }), /*#__PURE__*/_jsx(\"input\", {\n            name: \"confirmpass\",\n            type: \"password\",\n            value: inputs.confirmpass,\n            onChange: handleType,\n            placeholder: \"Confirm Password\",\n            required: true,\n            className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]])\n          }), error ? /*#__PURE__*/_jsx(\"div\", {\n            className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]) + \" \" + 'info',\n            children: error\n          }) : null, /*#__PURE__*/_jsx(\"button\", {\n            type: \"submit\",\n            className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]),\n            children: \"Change Pass\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"img\", {\n        src: \"/loader.gif\",\n        className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]) + \" \" + 'loader'\n      }), confirmation && /*#__PURE__*/_jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]) + \" \" + 'confirmation',\n        children: \"Your password has successfully been changed!\"\n      }), confirmation && /*#__PURE__*/_jsx(Link, {\n        href: \"/login\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: _JSXStyle.dynamic([[\"2157767206\", [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none']]]) + \" \" + 'link',\n          children: \"Go to login\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(_JSXStyle, {\n      id: \"2157767206\",\n      dynamic: [Theme.sh.mat, loading == false ? 'flex' : 'none', loading == false ? 'none' : 'block', loading === 'response' ? 'block' : 'none'],\n      children: [\".forgotpass.__jsx-style-dynamic-selector{float:left;height:100%;width:100%;display:grid;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\", \".info.__jsx-style-dynamic-selector{float:left;font:16px 'Roboto';color:red;}\", `.center.__jsx-style-dynamic-selector{width:350px;height:250px;padding:40px;box-shadow:${Theme.sh.mat};border-radius:6px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-flow:column wrap;-ms-flex-flow:column wrap;flex-flow:column wrap;}`, \".center.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector{font:20px 'Montserrat';margin:5px;margin-bottom:10px;}\", \"input.__jsx-style-dynamic-selector{margin:10px;min-width:250px;}\", `form.__jsx-style-dynamic-selector{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-flex-flow:column wrap;-ms-flex-flow:column wrap;flex-flow:column wrap;display:${loading == false ? 'flex' : 'none'};}`, `.loader.__jsx-style-dynamic-selector{float:left;width:45px;height:45px;margin:10px 0;display:${loading == false ? 'none' : 'block'};}`, `.res.__jsx-style-dynamic-selector{float:left;font:16px 'Roboto';width:90%;display:${loading === 'response' ? 'block' : 'none'};}`]\n    })]\n  });\n}\n\nChangePassword.getInitialProps = async ctx => {\n  const token = await ctx.query.auth;\n  return {\n    auth: token\n  };\n};\n\nexport default ChangePassword;","map":null,"metadata":{},"sourceType":"module"}