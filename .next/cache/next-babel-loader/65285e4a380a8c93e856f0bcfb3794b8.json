{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport App from 'next/app';\nimport Layout from '../components/layout';\nimport { Provider } from \"react-redux\";\nimport { createWrapper } from 'next-redux-wrapper';\nimport store from \"../store/store\";\nimport { useSelector } from 'react-redux';\nimport Router, { useRouter } from 'next/router';\nimport { useState } from 'react';\nimport Theme from '../styles/theme';\n\nfunction MyApp({\n  Component,\n  pageProps,\n  router\n}) {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    profile,\n    auth\n  } = useSelector(state => state.post);\n  const {\n    0: userProfile,\n    1: setProfile\n  } = useState(profile);\n  const {\n    0: authorization,\n    1: setAuthorization\n  } = useState(auth);\n  const {\n    0: themeColor,\n    1: setTheme\n  } = useState(userProfile ? userProfile.userTheme == 'Light' ? '#ffffff' : Theme.colors.dark : '#ffffff');\n  Router.events.on('routeChangeStart', () => setLoading(true));\n  Router.events.on('routeChangeComplete', () => setLoading(false));\n  Router.events.on('routeChangeError', () => setLoading(false)); // Sync Profile with redux \n\n  useEffect(() => {\n    setProfile(profile);\n    setAuthorization(auth);\n    setTheme(userProfile ? userProfile.userTheme == 'Light' ? '#ffffff' : Theme.colors.dark : '#ffffff');\n  }, [profile]);\n  return /*#__PURE__*/_jsx(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsx(Layout, {\n      profile: userProfile,\n      themeColor: themeColor,\n      setTheme: setTheme,\n      router: router,\n      auth: authorization,\n      children: /*#__PURE__*/_jsx(Component, _objectSpread({\n        auth: authorization,\n        user: userProfile,\n        themeColor: themeColor\n      }, pageProps))\n    })\n  });\n}\n\nconst makestore = () => store;\n\nconst wrapper = createWrapper(makestore);\nexport default wrapper.withRedux(MyApp);","map":null,"metadata":{},"sourceType":"module"}