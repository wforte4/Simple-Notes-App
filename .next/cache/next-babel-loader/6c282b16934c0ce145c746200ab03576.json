{"ast":null,"code":"import _regeneratorRuntime from \"/home/wforte/canvas/SynapseFlash/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/wforte/canvas/SynapseFlash/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useSelector } from \"react-redux\";\nexport function uploadThought(_x) {\n  return _uploadThought.apply(this, arguments);\n}\n\nfunction _uploadThought() {\n  var _s = $RefreshSig$();\n\n  _uploadThought = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var thought, user, mindset, _useSelector, auth, newThought;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s();\n\n            thought = _ref.thought, user = _ref.user, mindset = _ref.mindset;\n            _useSelector = useSelector(function (state) {\n              return state.post;\n            }), auth = _useSelector.auth; // New Login Data request\n\n            _context.next = 5;\n            return fetch(baseConfig.thoughtURL, {\n              method: 'POST',\n              headers: {\n                \"Content-type\": \"application/json\",\n                \"Authorization\": \"Bearer \".concat(auth && auth.accessToken)\n              },\n              body: JSON.stringify({\n                \"thought\": thought,\n                \"user\": user,\n                \"mindset\": mindset\n              })\n            }).then(function (response) {\n              return response.json();\n            })[\"catch\"](function (error) {\n              return error;\n            });\n\n          case 5:\n            newThought = _context.sent;\n\n            if (!newThought) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", newThought);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }), \"Z4X3l49ceXkuqSlvIOC0EAxNlX0=\", false, function () {\n    return [useSelector];\n  }));\n  return _uploadThought.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/wforte/canvas/SynapseFlash/services/thoughtservice.js"],"names":["useSelector","uploadThought","thought","user","mindset","state","post","auth","fetch","baseConfig","thoughtURL","method","headers","accessToken","body","JSON","stringify","then","response","json","error","newThought"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AAGA,gBAAsBC,aAAtB;AAAA;AAAA;;;;;+EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAA8BC,YAAAA,OAA9B,QAA8BA,OAA9B,EAAuCC,IAAvC,QAAuCA,IAAvC,EAA6CC,OAA7C,QAA6CA,OAA7C;AAAA,2BAEYJ,WAAW,CAAC,UAAAK,KAAK;AAAA,qBAAIA,KAAK,CAACC,IAAV;AAAA,aAAN,CAFvB,EAEIC,IAFJ,gBAEIA,IAFJ,EAGH;;AAHG;AAAA,mBAIsBC,KAAK,CAACC,UAAU,CAACC,UAAZ,EAAwB;AAClDC,cAAAA,MAAM,EAAE,MAD0C;AAElDC,cAAAA,OAAO,EAAE;AACL,gCAAgB,kBADX;AAEL,kDAA2BL,IAAI,IAAIA,IAAI,CAACM,WAAxC;AAFK,eAFyC;AAMlDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,2BAAWd,OADM;AAEjB,wBAAQC,IAFS;AAGjB,2BAAWC;AAHM,eAAf;AAN4C,aAAxB,CAAL,CAYxBa,IAZwB,CAYnB,UAASC,QAAT,EAAmB;AACrB,qBAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,aAdwB,WAelB,UAASC,KAAT,EAAgB;AACnB,qBAAOA,KAAP;AACH,aAjBwB,CAJtB;;AAAA;AAIGC,YAAAA,UAJH;;AAAA,iBAsBAA,UAtBA;AAAA;AAAA;AAAA;;AAAA,6CAuBQA,UAvBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;YAEYrB,W","sourcesContent":["import { useSelector } from \"react-redux\";\n\n\nexport async function uploadThought({thought, user, mindset}) {\n\n    const {auth} = useSelector(state => state.post)\n    // New Login Data request\n    const newThought = await fetch(baseConfig.thoughtURL, {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${auth && auth.accessToken}`\n        },\n        body: JSON.stringify({\n            \"thought\": thought,\n            \"user\": user,\n            \"mindset\": mindset,\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newThought) {\n        return newThought\n    }\n\n}"]},"metadata":{},"sourceType":"module"}