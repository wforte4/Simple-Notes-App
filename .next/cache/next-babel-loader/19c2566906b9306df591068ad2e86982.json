{"ast":null,"code":"import { useSelector } from \"react-redux\";\nexport async function uploadThought({\n  thought,\n  user,\n  mindset\n}) {\n  const {\n    auth\n  } = useSelector(state => state.post); // New Login Data request\n\n  const newThought = await fetch(baseConfig.thoughtURL, {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${auth && auth.accessToken}`\n    },\n    body: JSON.stringify({\n      \"thought\": thought,\n      \"user\": user,\n      \"mindset\": mindset\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newThought) {\n    return newThought;\n  }\n}","map":{"version":3,"sources":["/home/wforte/canvas/SynapseFlash/services/thoughtservice.js"],"names":["useSelector","uploadThought","thought","user","mindset","auth","state","post","newThought","fetch","baseConfig","thoughtURL","method","headers","accessToken","body","JSON","stringify","then","response","json","catch","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AAGA,OAAO,eAAeC,aAAf,CAA6B;AAACC,EAAAA,OAAD;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAA7B,EAAuD;AAE1D,QAAM;AAACC,IAAAA;AAAD,MAASL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA1B,CAF0D,CAG1D;;AACA,QAAMC,UAAU,GAAG,MAAMC,KAAK,CAACC,UAAU,CAACC,UAAZ,EAAwB;AAClDC,IAAAA,MAAM,EAAE,MAD0C;AAElDC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAASR,IAAI,IAAIA,IAAI,CAACS,WAAY;AAF/C,KAFyC;AAMlDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,iBAAWf,OADM;AAEjB,cAAQC,IAFS;AAGjB,iBAAWC;AAHM,KAAf;AAN4C,GAAxB,CAAL,CAYxBc,IAZwB,CAYnB,UAASC,QAAT,EAAmB;AACrB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAdwB,EAexBC,KAfwB,CAelB,UAASC,KAAT,EAAgB;AACnB,WAAOA,KAAP;AACH,GAjBwB,CAAzB;;AAkBA,MAAGd,UAAH,EAAe;AACX,WAAOA,UAAP;AACH;AAEJ","sourcesContent":["import { useSelector } from \"react-redux\";\n\n\nexport async function uploadThought({thought, user, mindset}) {\n\n    const {auth} = useSelector(state => state.post)\n    // New Login Data request\n    const newThought = await fetch(baseConfig.thoughtURL, {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${auth && auth.accessToken}`\n        },\n        body: JSON.stringify({\n            \"thought\": thought,\n            \"user\": user,\n            \"mindset\": mindset,\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newThought) {\n        return newThought\n    }\n\n}"]},"metadata":{},"sourceType":"module"}