{"ast":null,"code":"import * as types from '../types';\nimport { getProjects } from '../../services/projectservice';\nimport { loginRequest } from '../../services/apiservice';\nimport jwt_decode from 'jwt-decode';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport { getThoughts } from '../../services/thoughtservice';\nconst cookies = new Cookies();\nexport const fetchThoughts = (email, auth) => async dispatch => {\n  const res = await getThoughts(email, auth);\n  console.log(res);\n  dispatch({\n    type: types.GET_THOUGHTS,\n    payload: res.length > 0 ? res : null\n  });\n};\nexport const signIn = (email, password) => async dispatch => {\n  const res = await loginRequest(email, password);\n  console.log(res);\n\n  if (res === 400) {\n    dispatch({\n      type: types.FAILEDLOGIN,\n      payload: 400,\n      errorMessage: 'Invalid Email or Password'\n    });\n    return;\n  }\n\n  const decoded = jwt_decode(res.accessToken);\n  cookies.set('user', decoded);\n  cookies.set('auth', res);\n  dispatch({\n    type: types.AUTH,\n    payload: res\n  });\n  dispatch({\n    type: types.LOGIN,\n    payload: decoded\n  });\n  await Router.push('/');\n};\nexport const signOut = () => async dispatch => {\n  cookies.remove('user');\n  cookies.remove('auth');\n  dispatch({\n    type: types.LOGOUT,\n    payload: null\n  });\n  await Router.push(\"/login\");\n};","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/store/actions/postAction.js"],"names":["types","getProjects","loginRequest","jwt_decode","Router","Cookies","getThoughts","cookies","fetchThoughts","email","auth","dispatch","res","console","log","type","GET_THOUGHTS","payload","length","signIn","password","FAILEDLOGIN","errorMessage","decoded","accessToken","set","AUTH","LOGIN","push","signOut","remove","LOGOUT"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAEA,MAAMC,OAAO,GAAG,IAAIF,OAAJ,EAAhB;AAEA,OAAO,MAAMG,aAAa,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB,MAAMC,QAAN,IAAkB;AAC5D,QAAMC,GAAG,GAAG,MAAMN,WAAW,CAACG,KAAD,EAAQC,IAAR,CAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAD,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEf,KAAK,CAACgB,YADP;AAELC,IAAAA,OAAO,EAAEL,GAAG,CAACM,MAAJ,GAAa,CAAb,GAAiBN,GAAjB,GAAsB;AAF1B,GAAD,CAAR;AAIH,CAPM;AASP,OAAO,MAAMO,MAAM,GAAG,CAACV,KAAD,EAAQW,QAAR,KAAqB,MAAMT,QAAN,IAAkB;AACzD,QAAMC,GAAG,GAAG,MAAMV,YAAY,CAACO,KAAD,EAAQW,QAAR,CAA9B;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,MAAGA,GAAG,KAAK,GAAX,EAAgB;AACZD,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEf,KAAK,CAACqB,WADP;AAELJ,MAAAA,OAAO,EAAE,GAFJ;AAGLK,MAAAA,YAAY,EAAE;AAHT,KAAD,CAAR;AAKA;AACH;;AACD,QAAMC,OAAO,GAAGpB,UAAU,CAACS,GAAG,CAACY,WAAL,CAA1B;AACAjB,EAAAA,OAAO,CAACkB,GAAR,CAAY,MAAZ,EAAoBF,OAApB;AACAhB,EAAAA,OAAO,CAACkB,GAAR,CAAY,MAAZ,EAAoBb,GAApB;AACAD,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEf,KAAK,CAAC0B,IADP;AAELT,IAAAA,OAAO,EAAEL;AAFJ,GAAD,CAAR;AAIAD,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEf,KAAK,CAAC2B,KADP;AAELV,IAAAA,OAAO,EAAEM;AAFJ,GAAD,CAAR;AAIA,QAAMnB,MAAM,CAACwB,IAAP,CAAY,GAAZ,CAAN;AACH,CAvBM;AAyBP,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAMlB,QAAN,IAAkB;AAC3CJ,EAAAA,OAAO,CAACuB,MAAR,CAAe,MAAf;AACAvB,EAAAA,OAAO,CAACuB,MAAR,CAAe,MAAf;AACAnB,EAAAA,QAAQ,CAAC;AACLI,IAAAA,IAAI,EAAEf,KAAK,CAAC+B,MADP;AAELd,IAAAA,OAAO,EAAE;AAFJ,GAAD,CAAR;AAIA,QAAMb,MAAM,CAACwB,IAAP,CAAY,QAAZ,CAAN;AACH,CARM","sourcesContent":["import * as types from '../types'\nimport { getProjects } from '../../services/projectservice'\nimport { loginRequest } from '../../services/apiservice'\nimport jwt_decode from 'jwt-decode';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport { getThoughts } from '../../services/thoughtservice';\n\nconst cookies = new Cookies();\n\nexport const fetchThoughts = (email, auth) => async dispatch => {\n    const res = await getThoughts(email, auth)\n    console.log(res)\n    dispatch({\n        type: types.GET_THOUGHTS,\n        payload: res.length > 0 ? res: null\n    })\n}\n\nexport const signIn = (email, password) => async dispatch => {\n    const res = await loginRequest(email, password)\n    console.log(res)\n    if(res === 400) {\n        dispatch({\n            type: types.FAILEDLOGIN,\n            payload: 400,\n            errorMessage: 'Invalid Email or Password'\n        })\n        return\n    }\n    const decoded = jwt_decode(res.accessToken)\n    cookies.set('user', decoded)\n    cookies.set('auth', res)\n    dispatch({\n        type: types.AUTH,\n        payload: res\n    })\n    dispatch({\n        type: types.LOGIN,\n        payload: decoded\n    })\n    await Router.push('/')\n}\n\nexport const signOut = () => async dispatch => {\n    cookies.remove('user')\n    cookies.remove('auth')\n    dispatch({\n        type: types.LOGOUT,\n        payload: null\n    })\n    await Router.push(\"/login\");\n}"]},"metadata":{},"sourceType":"module"}