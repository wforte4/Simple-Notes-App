{"ast":null,"code":"import { useState, useEffect } from \"react\";\nexport function useScroll() {\n  const {\n    0: lastScrollTop,\n    1: setLastScrollTop\n  } = useState(0);\n  const {\n    0: bodyOffset,\n    1: setBodyOffset\n  } = useState(0);\n  const {\n    0: scrollY,\n    1: setScrollY\n  } = useState(bodyOffset.top);\n  const {\n    0: scrollX,\n    1: setScrollX\n  } = useState(bodyOffset.left);\n  const {\n    0: scrollDirection,\n    1: setScrollDirection\n  } = useState();\n\n  const listener = e => {\n    setBodyOffset(document.body.getBoundingClientRect());\n    setScrollY(-bodyOffset.top);\n    setScrollX(bodyOffset.left);\n    setScrollDirection(lastScrollTop > -bodyOffset.top ? \"down\" : \"up\");\n    setLastScrollTop(-bodyOffset.top);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", listener);\n    return () => {\n      window.removeEventListener(\"scroll\", listener);\n    };\n  });\n  return {\n    scrollY,\n    scrollX,\n    scrollDirection\n  };\n}\nexport function useWindowSize() {\n  const isClient = false;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const {\n    0: storedValue,\n    1: setStoredValue\n  } = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/components/hooks.js"],"names":["useState","useEffect","useScroll","lastScrollTop","setLastScrollTop","bodyOffset","setBodyOffset","scrollY","setScrollY","top","scrollX","setScrollX","left","scrollDirection","setScrollDirection","listener","e","document","body","getBoundingClientRect","window","addEventListener","removeEventListener","useWindowSize","isClient","getSize","width","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function useScroll() {\n  const [lastScrollTop, setLastScrollTop] = useState(0);\n  const [bodyOffset, setBodyOffset] = useState(0);\n  const [scrollY, setScrollY] = useState(bodyOffset.top);\n  const [scrollX, setScrollX] = useState(bodyOffset.left);\n  const [scrollDirection, setScrollDirection] = useState();\n\n  const listener = e => {\n    setBodyOffset(document.body.getBoundingClientRect());\n    setScrollY(-bodyOffset.top);\n    setScrollX(bodyOffset.left);\n    setScrollDirection(lastScrollTop > -bodyOffset.top ? \"down\" : \"up\");\n    setLastScrollTop(-bodyOffset.top);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", listener);\n    return () => {\n      window.removeEventListener(\"scroll\", listener);\n    };\n  });\n\n  return {\n    scrollY,\n    scrollX,\n    scrollDirection\n  };\n}\n\nexport function useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\nexport function useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}"]},"metadata":{},"sourceType":"module"}