{"ast":null,"code":"import Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport jwt_decode from 'jwt-decode';\nimport { baseConfig } from './restservice';\nconst cookies = new Cookies();\nexport async function createProfile(firstname, lastname, email, password) {\n  // Request data to post to createprofile route on rest api\n  fetch(baseConfig.baseURL + '/users', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"firstName\": firstname,\n      \"lastName\": lastname,\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log('Request succeeded with JSON response', data);\n  }).catch(function (error) {\n    console.log('Request failed', error);\n  });\n}\nexport async function loginRequest(email, password) {\n  // New Login Data request\n  const newLogin = await fetch(baseConfig.baseURL + '/auth', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(function (response) {\n    if (response.status == 400) return response.status;\n    return response.json();\n  }).then(function (data) {\n    return data;\n  }).catch(function (error) {\n    return error;\n  });\n  return newLogin;\n}\nexport async function forgotPassword(email) {\n  // New Login Data request\n  const newLogin = await fetch(baseConfig.baseURL + '/users/forgotpass/' + email, {\n    method: 'GET',\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return data;\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newLogin) {\n    return newLogin;\n  }\n}\nexport async function changePassword(token, newPassword) {\n  // New Login Data request\n  const newLogin = await fetch(baseConfig.baseURL + '/users/changepassword/' + newPassword, {\n    method: 'GET',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    return data;\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newLogin) {\n    return newLogin;\n  }\n}\nexport async function submitContact(name, message, email, cellphone) {\n  // Request data to post to createprofile route on rest api\n  const newfetch = await fetch(baseConfig.baseURL + '/contact', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"name\": name,\n      \"message\": message,\n      \"cellphone\": cellphone,\n      \"email\": email\n    })\n  }).then(function (res) {\n    return res.status;\n  }).catch(function (error) {\n    console.log('Request failed', error);\n  });\n\n  if (newfetch) {\n    return newfetch;\n  } else {\n    return 404;\n  }\n}\nexport async function patchUser(userId, token, userData) {\n  // Request data to post to createprofile route on rest api\n  const newfetch = await fetch(baseConfig.baseURL + '/users/' + userId, {\n    method: 'PATCH',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      userData\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    console.log('Request failed', error);\n  });\n\n  if (newfetch) {\n    return newfetch;\n  } else {\n    return 404;\n  }\n}","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/services/apiservice.js"],"names":["Router","Cookies","jwt_decode","baseConfig","cookies","createProfile","firstname","lastname","email","password","fetch","baseURL","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","loginRequest","newLogin","status","forgotPassword","changePassword","token","newPassword","submitContact","name","message","cellphone","newfetch","res","patchUser","userId","userData"],"mappings":"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","sourcesContent":["import Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport jwt_decode from 'jwt-decode';\nimport { baseConfig } from './restservice';\n\nconst cookies = new Cookies();\n\nexport async function createProfile(firstname, lastname, email, password) {\n    // Request data to post to createprofile route on rest api\n    fetch(baseConfig.baseURL + '/users', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"firstName\": firstname,\n            \"lastName\": lastname,\n            \"email\": email,\n            \"password\": password\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response', data);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n}\n\nexport async function loginRequest(email, password) {\n    // New Login Data request\n    const newLogin = await fetch(baseConfig.baseURL + '/auth', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"email\": email,\n            \"password\": password\n        })\n    })\n    .then(function(response) {\n        if(response.status == 400) return response.status\n        return response.json();\n    })\n    .then(function(data) {\n        return data\n    })\n    .catch(function(error) {\n        return error\n    });\n    return newLogin\n}\n\nexport async function forgotPassword(email) {\n    // New Login Data request\n    const newLogin = await fetch(baseConfig.baseURL + '/users/forgotpass/' + email, {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        return data\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newLogin) {\n        return newLogin\n    }\n}\n\nexport async function changePassword(token, newPassword) {\n    // New Login Data request\n    const newLogin = await fetch(baseConfig.baseURL + '/users/changepassword/' + newPassword, {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        }\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        return data\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newLogin) {\n        return newLogin\n    }\n}\n\nexport async function submitContact(name, message, email, cellphone) {\n    // Request data to post to createprofile route on rest api\n    const newfetch = await fetch(baseConfig.baseURL + '/contact', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"name\": name,\n            \"message\": message,\n            \"cellphone\": cellphone,\n            \"email\": email\n        })\n    })\n    .then(function(res) {\n        return res.status\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n\n    if(newfetch) {\n        return newfetch\n    } else {\n        return 404\n    }\n}\n\nexport async function patchUser(userId, token, userData) {\n    // Request data to post to createprofile route on rest api\n    const newfetch = await fetch(baseConfig.baseURL + '/users/' + userId, {\n        method: 'PATCH',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify({ userData })\n    })\n    .then(function(response) {\n        return response.json()\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n\n    if(newfetch) {\n        return newfetch\n    } else {\n        return 404\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}