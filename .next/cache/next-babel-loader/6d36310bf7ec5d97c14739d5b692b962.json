{"ast":null,"code":"import * as types from '../types';\nimport { getProjects } from '../../services/projectservice';\nimport { loginRequest, getAllUsers } from '../../services/apiservice';\nimport jwt_decode from 'jwt-decode';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport { getThoughts } from '../../services/thoughtservice';\nconst cookies = new Cookies();\nexport const fetchThoughts = (email, auth) => async dispatch => {\n  const res = await getThoughts(email, auth);\n  console.log(res);\n  dispatch({\n    type: types.GET_THOUGHTS,\n    payload: res.length > 0 ? res : null\n  });\n};\nexport const getAllUsersAction = (token, limit) => async dispatch => {\n  const res = await getAllUsers(token, limit);\n  console.log(res);\n  dispatch({\n    type: types.GET_ALLUSERS,\n    payload: res.length > 0 ? res : null,\n    error: null,\n    errorMessage: null\n  });\n};\nexport const signIn = (email, password) => async dispatch => {\n  const res = await loginRequest(email, password);\n  console.log(res);\n\n  if (res === 400) {\n    dispatch({\n      type: types.FAILEDLOGIN,\n      payload: 400,\n      errorMessage: 'Invalid Email or Password'\n    });\n    return;\n  }\n\n  const decoded = jwt_decode(res.accessToken);\n  cookies.set('user', decoded);\n  cookies.set('auth', res);\n  dispatch({\n    type: types.AUTH,\n    payload: res\n  });\n  dispatch({\n    type: types.LOGIN,\n    payload: decoded\n  });\n  await Router.push('/');\n};\nexport const signOut = () => async dispatch => {\n  cookies.remove('user');\n  cookies.remove('auth');\n  dispatch({\n    type: types.LOGOUT,\n    payload: null\n  });\n  await Router.push(\"/login\");\n};","map":{"version":3,"sources":["/Users/williamforte/Canvas/SynapseFlash/store/actions/postAction.js"],"names":["types","getProjects","loginRequest","getAllUsers","jwt_decode","Router","Cookies","getThoughts","cookies","fetchThoughts","email","auth","dispatch","res","console","log","type","GET_THOUGHTS","payload","length","getAllUsersAction","token","limit","GET_ALLUSERS","error","errorMessage","signIn","password","FAILEDLOGIN","decoded","accessToken","set","AUTH","LOGIN","push","signOut","remove","LOGOUT"],"mappings":"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","sourcesContent":["import * as types from '../types'\nimport { getProjects } from '../../services/projectservice'\nimport { loginRequest, getAllUsers } from '../../services/apiservice'\nimport jwt_decode from 'jwt-decode';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport { getThoughts } from '../../services/thoughtservice';\n\nconst cookies = new Cookies();\n\nexport const fetchThoughts = (email, auth) => async dispatch => {\n    const res = await getThoughts(email, auth)\n    console.log(res)\n    dispatch({\n        type: types.GET_THOUGHTS,\n        payload: res.length > 0 ? res: null\n    })\n}\n\nexport const getAllUsersAction = (token, limit) => async dispatch => {\n    const res = await getAllUsers(token, limit);\n    console.log(res)\n    dispatch({\n        type: types.GET_ALLUSERS,\n        payload: res.length > 0 ? res: null,\n        error: null,\n        errorMessage: null\n    })\n}\n\nexport const signIn = (email, password) => async dispatch => {\n    const res = await loginRequest(email, password)\n    console.log(res)\n    if(res === 400) {\n        dispatch({\n            type: types.FAILEDLOGIN,\n            payload: 400,\n            errorMessage: 'Invalid Email or Password'\n        })\n        return\n    }\n    const decoded = jwt_decode(res.accessToken)\n    cookies.set('user', decoded)\n    cookies.set('auth', res)\n    dispatch({\n        type: types.AUTH,\n        payload: res\n    })\n    dispatch({\n        type: types.LOGIN,\n        payload: decoded\n    })\n    await Router.push('/')\n}\n\nexport const signOut = () => async dispatch => {\n    cookies.remove('user')\n    cookies.remove('auth')\n    dispatch({\n        type: types.LOGOUT,\n        payload: null\n    })\n    await Router.push(\"/login\");\n}"]},"metadata":{},"sourceType":"module"}