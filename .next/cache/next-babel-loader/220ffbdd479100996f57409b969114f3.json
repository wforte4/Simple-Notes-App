{"ast":null,"code":"import * as types from '../types';\nimport { getProjects } from '../../services/projectservice';\nimport { loginRequest, getAllUsers, patchUser } from '../../services/apiservice';\nimport jwt_decode from 'jwt-decode';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport { getThoughts } from '../../services/thoughtservice';\nconst cookies = new Cookies();\nexport const fetchThoughts = (email, auth) => async dispatch => {\n  const res = await getThoughts(email, auth);\n  console.log(res);\n  dispatch({\n    type: types.GET_THOUGHTS,\n    payload: res.length > 0 ? res : null\n  });\n};\nexport const updateProfile = (userId, token, inputs) => async dispatch => {\n  const res = await patchUser(userId, token, inputs);\n  console.log(res);\n};\nexport const getAllUsersAdmin = (token, limit) => async dispatch => {\n  const res = await getAllUsers(token, limit);\n  console.log(res);\n  if (res.status === 401) await Router.push('/notauthorized');\n  dispatch({\n    type: types.GET_ALLUSERS,\n    payload: res.length > 0 ? res : null,\n    error: null,\n    errorMessage: null\n  });\n};\nexport const signIn = (email, password) => async dispatch => {\n  const res = await loginRequest(email, password);\n  console.log(res);\n\n  if (res === 400) {\n    dispatch({\n      type: types.FAILEDLOGIN,\n      payload: 400,\n      errorMessage: 'Invalid Email or Password'\n    });\n    return;\n  }\n\n  const decoded = jwt_decode(res.accessToken);\n  cookies.set('user', decoded);\n  cookies.set('auth', res);\n  dispatch({\n    type: types.AUTH,\n    payload: res\n  });\n  dispatch({\n    type: types.LOGIN,\n    payload: decoded\n  });\n  await Router.push('/');\n};\nexport const signOut = () => async dispatch => {\n  cookies.remove('user');\n  cookies.remove('auth');\n  dispatch({\n    type: types.LOGOUT,\n    payload: null\n  });\n  await Router.push(\"/login\");\n};","map":null,"metadata":{},"sourceType":"module"}